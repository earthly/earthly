FROM alpine:3.11

release:
    ARG RELEASE_TAG
    RUN test -n "$RELEASE_TAG"
    BUILD ../+test-all
    BUILD --build-arg RELEASE_TAG="$RELEASE_TAG" +release-dockerhub
    BUILD --build-arg RELEASE_TAG="$RELEASE_TAG" +release-github

release-dockerhub:
    ARG RELEASE_TAG
    RUN test -n "$RELEASE_TAG"
    BUILD --build-arg TAG="$RELEASE_TAG" ../+earth-docker
    BUILD --build-arg TAG="$RELEASE_TAG" ../buildkitd+buildkitd
    BUILD --build-arg TAG=latest ../+earth-docker
    BUILD --build-arg TAG=latest ../buildkitd+buildkitd

release-github:
    FROM node:13.10.1-alpine3.11
    RUN npm install -g github-release-cli
    WORKDIR /earthly
    ARG RELEASE_TAG
    ARG EARTHLY_GIT_HASH
    RUN test -n "$RELEASE_TAG" && test -n "$EARTHLY_GIT_HASH"
    COPY --build-arg VERSION=$RELEASE_TAG \
        ../+earth-all/* ./release/
    ARG BODY="No details provided"
    RUN --secret GITHUB_TOKEN=+secrets/GITHUB_TOKEN test -n "$GITHUB_TOKEN"
    RUN --push \
        --secret GITHUB_TOKEN=+secrets/GITHUB_TOKEN \
        github-release upload \
        --owner earthly \
        --repo earthly \
        --commitish "$EARTHLY_GIT_HASH" \
        --tag "$RELEASE_TAG" \
        --name "$RELEASE_TAG" \
        --body "$BODY" \
        ./release/*

release-homebrew:
    RUN apk add --update --no-cache \
        bash \
        bash-completion \
        binutils \
        ca-certificates \
        coreutils \
        curl \
        findutils \
        g++ \
        git \
        grep \
        less \
        make \
        openssl \
        util-linux
    RUN apk add --update --no-cache --repository=http://dl-cdn.alpinelinux.org/alpine/edge/testing hub
    
    # Deps and preconditions.
    ARG RELEASE_TAG
    ARG GIT_USERNAME
    ARG GIT_NAME
    ARG GIT_EMAIL
    ARG REPO_OWNER=Homebrew
    ARG HOMEBREW_CORE_URL="https://github.com/$REPO_OWNER/homebrew-core"
    RUN test -n "$RELEASE_TAG" && \
        test -n "$GIT_USERNAME" && \
        test -n "$GIT_NAME" && \
        test -n "$GIT_EMAIL" && \
        test -n "$REPO_OWNER" && \
        test -n "$HOMEBREW_CORE_URL"
    ARG NEW_URL=https://github.com/earthly/earthly/archive/"$RELEASE_TAG".tar.gz
    RUN test -n "$NEW_URL"
    GIT CLONE "$HOMEBREW_CORE_URL" /earthly/homebrew-core
    WORKDIR /earthly/homebrew-core

    # Git setup.
    # Force use of https.
    RUN git remote set-url origin "$HOMEBREW_CORE_URL" && \
        git remote -v
    RUN --secret GIT_PASSWORD=+secrets/GITHUB_TOKEN \
        git fetch --unshallow origin master
    RUN git branch -f master && \
        git checkout master && \
        git branch -u origin/master
    RUN git config --global user.name "$GIT_NAME" && \
        git config --global user.email "$GIT_EMAIL"
    COPY ./envcredhelper.sh /usr/bin/envcredhelper.sh
    RUN git config --global credential.helper "/bin/sh /usr/bin/envcredhelper.sh"

    # Make the change in a new branch.
    RUN git checkout -b "release-$RELEASE_TAG"
    RUN mkdir -p /params
    RUN curl -L "$NEW_URL" | sha256sum | cut -f 1 -d ' ' > /params/downloadsha256
    COPY --build-arg VERSION=$RELEASE_TAG \
        ../+earth-darwin/tags ../+earth-darwin/ldflags /params/
    # Split /params/ldflags over two lines (to satisfy ruby linter).
    RUN split --numeric-suffixes=1 --suffix-length=1 --bytes=80 /params/ldflags /params/ldflags && \
        touch /params/ldflags2 && \
        if [ -f "/params/ldflags3" ]; then \
            echo "More than two lines for ldflags not supported" && \
            exit 1 ;\
        fi
    RUN sed -i \
        -e 's^url ".*"^url "'"$NEW_URL"'"^' \
        -e 's^sha256 ".*"$^sha256 "'$(cat /params/downloadsha256)'"^' \
        -e 's^tags = ".*"^tags = "'"$(cat /params/tags)"'"^' \
        -e 's^ldflags = ".*"^ldflags = "'"$(cat /params/ldflags1)"'"^' \
        -e '/ldflags = ".*"/{n;s^".*"^"'"$(cat /params/ldflags2)"'"^}' \
        ./Formula/earthly.rb
    RUN echo "Diff:" && git diff
    RUN version=${RELEASE_TAG#v} ;\
        echo version=$version ;\
        git commit -a -m "earthly $version"
    
    # Fork, push branch to fork and create upstream PR.
    RUN --secret GITHUB_TOKEN=+secrets/GITHUB_TOKEN test -n "$GITHUB_TOKEN"
    RUN --push \
        --secret GITHUB_TOKEN=+secrets/GITHUB_TOKEN \
        -- \
        hub fork
    # Force use of https st we can use GITHUB_TOKEN via envcredhelper.sh.
    RUN --push \
        -- \
        git remote set-url "$GIT_USERNAME" "https://github.com/$GIT_USERNAME/homebrew-core.git" && \
        git remote -v
    RUN --push \
        --secret GIT_PASSWORD=+secrets/GITHUB_TOKEN \
        -- \
        git push "$GIT_USERNAME" "release-$RELEASE_TAG"
    RUN --push \
        --secret GIT_PASSWORD=+secrets/GITHUB_TOKEN \
        --secret GITHUB_TOKEN=+secrets/GITHUB_TOKEN \
        -- \
        version=${RELEASE_TAG#v} ;\
        echo version=$version ;\
        hub pull-request --no-edit \
            -h "$GIT_USERNAME":"release-$RELEASE_TAG" \
            -b "$REPO_OWNER:master" \
            -m "earthly $version" \
            -m '-------------' \
            -m '#### Debug data' \
            -m 'PR generated by the [Earthly build](https://github.com/earthly/earthly/blob/master/release/Earthfile) (target +release-homebrew)' \
            -m '* `RELEASE_TAG='"$RELEASE_TAG"'`' \
            -m '* `GIT_USERNAME='"$GIT_USERNAME"'`' \
            -m '* `NEW_URL='"$NEW_URL"'`' \
            -m '* `NEW_SHA256='"$(cat /params/downloadsha256)"'`' \
            -m '* `TAGS='"$(cat /params/tags)"'`' \
            -m '* `LDFLAGS='"$(cat /params/ldflags)"'`' \
            -m '* `LDFLAGS1='"$(cat /params/ldflags1)"'`' \
            -m '* `LDFLAGS2='"$(cat /params/ldflags2)"'`'

release-vscode-syntax-highlighting:
    ARG VSCODE_RELEASE_TAG
    BUILD --build-arg VSCODE_RELEASE_TAG="$VSCODE_RELEASE_TAG" ../contrib/earthfile-syntax-highlighting+release
