// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: askv.proto

package askv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Askv_Exists_FullMethodName        = "/api.public.askv.Askv/Exists"
	Askv_Add_FullMethodName           = "/api.public.askv.Askv/Add"
	Askv_PrunePipeline_FullMethodName = "/api.public.askv.Askv/PrunePipeline"
	Askv_PruneProject_FullMethodName  = "/api.public.askv.Askv/PruneProject"
	Askv_PruneOrg_FullMethodName      = "/api.public.askv.Askv/PruneOrg"
)

// AskvClient is the client API for Askv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AskvClient interface {
	Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	PrunePipeline(ctx context.Context, in *PrunePipelineRequest, opts ...grpc.CallOption) (*PrunePipelineResponse, error)
	PruneProject(ctx context.Context, in *PruneProjectRequest, opts ...grpc.CallOption) (*PruneProjectResponse, error)
	PruneOrg(ctx context.Context, in *PruneOrgRequest, opts ...grpc.CallOption) (*PruneOrgResponse, error)
}

type askvClient struct {
	cc grpc.ClientConnInterface
}

func NewAskvClient(cc grpc.ClientConnInterface) AskvClient {
	return &askvClient{cc}
}

func (c *askvClient) Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, Askv_Exists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askvClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, Askv_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askvClient) PrunePipeline(ctx context.Context, in *PrunePipelineRequest, opts ...grpc.CallOption) (*PrunePipelineResponse, error) {
	out := new(PrunePipelineResponse)
	err := c.cc.Invoke(ctx, Askv_PrunePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askvClient) PruneProject(ctx context.Context, in *PruneProjectRequest, opts ...grpc.CallOption) (*PruneProjectResponse, error) {
	out := new(PruneProjectResponse)
	err := c.cc.Invoke(ctx, Askv_PruneProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askvClient) PruneOrg(ctx context.Context, in *PruneOrgRequest, opts ...grpc.CallOption) (*PruneOrgResponse, error) {
	out := new(PruneOrgResponse)
	err := c.cc.Invoke(ctx, Askv_PruneOrg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AskvServer is the server API for Askv service.
// All implementations must embed UnimplementedAskvServer
// for forward compatibility
type AskvServer interface {
	Exists(context.Context, *ExistsRequest) (*ExistsResponse, error)
	Add(context.Context, *AddRequest) (*AddResponse, error)
	PrunePipeline(context.Context, *PrunePipelineRequest) (*PrunePipelineResponse, error)
	PruneProject(context.Context, *PruneProjectRequest) (*PruneProjectResponse, error)
	PruneOrg(context.Context, *PruneOrgRequest) (*PruneOrgResponse, error)
	mustEmbedUnimplementedAskvServer()
}

// UnimplementedAskvServer must be embedded to have forward compatible implementations.
type UnimplementedAskvServer struct {
}

func (UnimplementedAskvServer) Exists(context.Context, *ExistsRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedAskvServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedAskvServer) PrunePipeline(context.Context, *PrunePipelineRequest) (*PrunePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrunePipeline not implemented")
}
func (UnimplementedAskvServer) PruneProject(context.Context, *PruneProjectRequest) (*PruneProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PruneProject not implemented")
}
func (UnimplementedAskvServer) PruneOrg(context.Context, *PruneOrgRequest) (*PruneOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PruneOrg not implemented")
}
func (UnimplementedAskvServer) mustEmbedUnimplementedAskvServer() {}

// UnsafeAskvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AskvServer will
// result in compilation errors.
type UnsafeAskvServer interface {
	mustEmbedUnimplementedAskvServer()
}

func RegisterAskvServer(s grpc.ServiceRegistrar, srv AskvServer) {
	s.RegisterService(&Askv_ServiceDesc, srv)
}

func _Askv_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskvServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Askv_Exists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskvServer).Exists(ctx, req.(*ExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Askv_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskvServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Askv_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskvServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Askv_PrunePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrunePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskvServer).PrunePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Askv_PrunePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskvServer).PrunePipeline(ctx, req.(*PrunePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Askv_PruneProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PruneProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskvServer).PruneProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Askv_PruneProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskvServer).PruneProject(ctx, req.(*PruneProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Askv_PruneOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PruneOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskvServer).PruneOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Askv_PruneOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskvServer).PruneOrg(ctx, req.(*PruneOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Askv_ServiceDesc is the grpc.ServiceDesc for Askv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Askv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.public.askv.Askv",
	HandlerType: (*AskvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exists",
			Handler:    _Askv_Exists_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Askv_Add_Handler,
		},
		{
			MethodName: "PrunePipeline",
			Handler:    _Askv_PrunePipeline_Handler,
		},
		{
			MethodName: "PruneProject",
			Handler:    _Askv_PruneProject_Handler,
		},
		{
			MethodName: "PruneOrg",
			Handler:    _Askv_PruneOrg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "askv.proto",
}
