syntax = "proto3";
package api.public.logstream;
option go_package = "./logstream";

import "manifest.proto";

message Delta {
  int32 version = 1;
  oneof delta_type_oneof {
    // delta_manifest represents a change to the run manifest.
    DeltaManifest delta_manifest = 2;
    // delta_log is a piece of a log stream of bytes, for a specific
    // command as part of the build. No presentation layer information
    // is embedded in this stream. The log information is the raw
    // output of the commands passed directly, without any changes.
    DeltaLog delta_log = 3;
    // delta_formatted_log is a piece of a log stream of bytes, with
    // all the appropriate formatting information embedded, including
    // target prefixes, ansi escape codes for colors, etc. This data is
    // broken down by targets, plus a special target_id "_full" will
    // contain the exact output of the entire build.
    DeltaFormattedLog delta_formatted_log = 4;
  }
}

message DeltaLog {
  // target_id is the target the command belongs to, if any.
  string target_id = 1;
  // command_id is the identifier of the command that generated the
  // log data.
  string command_id = 2;
  int32 stream = 3; // stdout or stderr
  uint64 timestamp_unix_nanos = 4;
  // data is the raw log data, as generated by the command. No formatting is
  // added on top (no ansii color codes, no target prefixes, etc).
  bytes data = 5;
}

message DeltaFormattedLog {
  // target_id is the target the command belongs to, if any. A special
  // target_id "_full" will contain the exact output of the entire build.
  string target_id = 1;
  uint64 timestamp_unix_nanos = 2;
  // data is the formatted log data, with all the appropriate formatting
  // information embedded, including target prefixes, ansi escape codes for
  // colors, etc.
  bytes data = 3;
}

message DeltaManifest {
  oneof delta_manifest_oneof {
    RunManifest reset_all = 1;
    FieldsDelta fields = 2;
    ResumeBuild resume = 3;
  }

  message ResumeBuild {
    string build_id = 1;
    string token = 2;
    string org_name = 3;
    string project_name = 4;
  }

  message FieldsDelta {
    string main_target_id = 8;
    uint64 started_at_unix_nanos = 1;
    uint64 ended_at_unix_nanos = 2;
    RunStatus status = 3;
    bool has_failure = 6;
    Failure failure = 4;
    map<string, DeltaTargetManifest> targets = 5;
    map<string, DeltaCommandManifest> commands = 7;
  }
}

message DeltaTargetManifest {
  string name = 1;
  string canonical_name = 2;
  string git_url = 10;
  string local_path = 11;
  string tag = 12;
  string import_ref = 13;
  repeated string override_args = 3;
  string initial_platform = 4;
  string final_platform = 8;
  string runner = 9;
  RunStatus status = 5;
  uint64 started_at_unix_nanos = 6;
  uint64 ended_at_unix_nanos = 7;
}

message DeltaCommandManifest {
  reserved 5, 6;
  reserved "is_push", "has_push";

  string name = 1;
  string target_id = 17;
  string category = 19;
  string platform = 18;
  RunStatus status = 2;
  bool has_cached = 3;
  bool is_cached = 4;
  bool has_local = 7;
  bool is_local = 8;
  bool has_interactive = 20;
  bool is_interactive = 21;
  uint64 started_at_unix_nanos = 9;
  uint64 ended_at_unix_nanos = 10;
  bool has_has_progress = 11;
  bool has_progress = 12;
  int32 progress = 13;
  string error_message = 14;
  bool has_source_location = 16;
  SourceLocation source_location = 15;
}
