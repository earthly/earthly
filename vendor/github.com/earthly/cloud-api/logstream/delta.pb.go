// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: delta.proto

package logstream

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Delta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Types that are assignable to DeltaTypeOneof:
	//
	//	*Delta_DeltaManifest
	//	*Delta_DeltaLog
	//	*Delta_DeltaFormattedLog
	DeltaTypeOneof isDelta_DeltaTypeOneof `protobuf_oneof:"delta_type_oneof"`
}

func (x *Delta) Reset() {
	*x = Delta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delta_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Delta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delta) ProtoMessage() {}

func (x *Delta) ProtoReflect() protoreflect.Message {
	mi := &file_delta_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delta.ProtoReflect.Descriptor instead.
func (*Delta) Descriptor() ([]byte, []int) {
	return file_delta_proto_rawDescGZIP(), []int{0}
}

func (x *Delta) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (m *Delta) GetDeltaTypeOneof() isDelta_DeltaTypeOneof {
	if m != nil {
		return m.DeltaTypeOneof
	}
	return nil
}

func (x *Delta) GetDeltaManifest() *DeltaManifest {
	if x, ok := x.GetDeltaTypeOneof().(*Delta_DeltaManifest); ok {
		return x.DeltaManifest
	}
	return nil
}

func (x *Delta) GetDeltaLog() *DeltaLog {
	if x, ok := x.GetDeltaTypeOneof().(*Delta_DeltaLog); ok {
		return x.DeltaLog
	}
	return nil
}

func (x *Delta) GetDeltaFormattedLog() *DeltaFormattedLog {
	if x, ok := x.GetDeltaTypeOneof().(*Delta_DeltaFormattedLog); ok {
		return x.DeltaFormattedLog
	}
	return nil
}

type isDelta_DeltaTypeOneof interface {
	isDelta_DeltaTypeOneof()
}

type Delta_DeltaManifest struct {
	// delta_manifest represents a change to the run manifest.
	DeltaManifest *DeltaManifest `protobuf:"bytes,2,opt,name=delta_manifest,json=deltaManifest,proto3,oneof"`
}

type Delta_DeltaLog struct {
	// delta_log is a piece of a log stream of bytes, for a specific
	// command as part of the build. No presentation layer information
	// is embedded in this stream. The log information is the raw
	// output of the commands passed directly, without any changes.
	DeltaLog *DeltaLog `protobuf:"bytes,3,opt,name=delta_log,json=deltaLog,proto3,oneof"`
}

type Delta_DeltaFormattedLog struct {
	// delta_formatted_log is a piece of a log stream of bytes, with
	// all the appropriate formatting information embedded, including
	// target prefixes, ansi escape codes for colors, etc. This data is
	// broken down by targets, plus a special target_id "_full" will
	// contain the exact output of the entire build.
	DeltaFormattedLog *DeltaFormattedLog `protobuf:"bytes,4,opt,name=delta_formatted_log,json=deltaFormattedLog,proto3,oneof"`
}

func (*Delta_DeltaManifest) isDelta_DeltaTypeOneof() {}

func (*Delta_DeltaLog) isDelta_DeltaTypeOneof() {}

func (*Delta_DeltaFormattedLog) isDelta_DeltaTypeOneof() {}

type DeltaLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// target_id is the target the command belongs to, if any.
	TargetId string `protobuf:"bytes,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	// command_id is the identifier of the command that generated the
	// log data.
	CommandId          string `protobuf:"bytes,2,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	Stream             int32  `protobuf:"varint,3,opt,name=stream,proto3" json:"stream,omitempty"` // stdout or stderr
	TimestampUnixNanos uint64 `protobuf:"varint,4,opt,name=timestamp_unix_nanos,json=timestampUnixNanos,proto3" json:"timestamp_unix_nanos,omitempty"`
	// data is the raw log data, as generated by the command. No formatting is
	// added on top (no ansii color codes, no target prefixes, etc).
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeltaLog) Reset() {
	*x = DeltaLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delta_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeltaLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaLog) ProtoMessage() {}

func (x *DeltaLog) ProtoReflect() protoreflect.Message {
	mi := &file_delta_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaLog.ProtoReflect.Descriptor instead.
func (*DeltaLog) Descriptor() ([]byte, []int) {
	return file_delta_proto_rawDescGZIP(), []int{1}
}

func (x *DeltaLog) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *DeltaLog) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

func (x *DeltaLog) GetStream() int32 {
	if x != nil {
		return x.Stream
	}
	return 0
}

func (x *DeltaLog) GetTimestampUnixNanos() uint64 {
	if x != nil {
		return x.TimestampUnixNanos
	}
	return 0
}

func (x *DeltaLog) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeltaFormattedLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// target_id is the target the command belongs to, if any. A special
	// target_id "_full" will contain the exact output of the entire build.
	TargetId           string `protobuf:"bytes,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	TimestampUnixNanos uint64 `protobuf:"varint,2,opt,name=timestamp_unix_nanos,json=timestampUnixNanos,proto3" json:"timestamp_unix_nanos,omitempty"`
	// data is the formatted log data, with all the appropriate formatting
	// information embedded, including target prefixes, ansi escape codes for
	// colors, etc.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeltaFormattedLog) Reset() {
	*x = DeltaFormattedLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delta_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeltaFormattedLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaFormattedLog) ProtoMessage() {}

func (x *DeltaFormattedLog) ProtoReflect() protoreflect.Message {
	mi := &file_delta_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaFormattedLog.ProtoReflect.Descriptor instead.
func (*DeltaFormattedLog) Descriptor() ([]byte, []int) {
	return file_delta_proto_rawDescGZIP(), []int{2}
}

func (x *DeltaFormattedLog) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *DeltaFormattedLog) GetTimestampUnixNanos() uint64 {
	if x != nil {
		return x.TimestampUnixNanos
	}
	return 0
}

func (x *DeltaFormattedLog) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeltaManifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DeltaManifestOneof:
	//
	//	*DeltaManifest_ResetAll
	//	*DeltaManifest_Fields
	//	*DeltaManifest_Resume
	DeltaManifestOneof isDeltaManifest_DeltaManifestOneof `protobuf_oneof:"delta_manifest_oneof"`
}

func (x *DeltaManifest) Reset() {
	*x = DeltaManifest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delta_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeltaManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaManifest) ProtoMessage() {}

func (x *DeltaManifest) ProtoReflect() protoreflect.Message {
	mi := &file_delta_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaManifest.ProtoReflect.Descriptor instead.
func (*DeltaManifest) Descriptor() ([]byte, []int) {
	return file_delta_proto_rawDescGZIP(), []int{3}
}

func (m *DeltaManifest) GetDeltaManifestOneof() isDeltaManifest_DeltaManifestOneof {
	if m != nil {
		return m.DeltaManifestOneof
	}
	return nil
}

func (x *DeltaManifest) GetResetAll() *RunManifest {
	if x, ok := x.GetDeltaManifestOneof().(*DeltaManifest_ResetAll); ok {
		return x.ResetAll
	}
	return nil
}

func (x *DeltaManifest) GetFields() *DeltaManifest_FieldsDelta {
	if x, ok := x.GetDeltaManifestOneof().(*DeltaManifest_Fields); ok {
		return x.Fields
	}
	return nil
}

func (x *DeltaManifest) GetResume() *DeltaManifest_ResumeBuild {
	if x, ok := x.GetDeltaManifestOneof().(*DeltaManifest_Resume); ok {
		return x.Resume
	}
	return nil
}

type isDeltaManifest_DeltaManifestOneof interface {
	isDeltaManifest_DeltaManifestOneof()
}

type DeltaManifest_ResetAll struct {
	ResetAll *RunManifest `protobuf:"bytes,1,opt,name=reset_all,json=resetAll,proto3,oneof"`
}

type DeltaManifest_Fields struct {
	Fields *DeltaManifest_FieldsDelta `protobuf:"bytes,2,opt,name=fields,proto3,oneof"`
}

type DeltaManifest_Resume struct {
	Resume *DeltaManifest_ResumeBuild `protobuf:"bytes,3,opt,name=resume,proto3,oneof"`
}

func (*DeltaManifest_ResetAll) isDeltaManifest_DeltaManifestOneof() {}

func (*DeltaManifest_Fields) isDeltaManifest_DeltaManifestOneof() {}

func (*DeltaManifest_Resume) isDeltaManifest_DeltaManifestOneof() {}

type DeltaTargetManifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CanonicalName      string    `protobuf:"bytes,2,opt,name=canonical_name,json=canonicalName,proto3" json:"canonical_name,omitempty"`
	GitUrl             string    `protobuf:"bytes,10,opt,name=git_url,json=gitUrl,proto3" json:"git_url,omitempty"`
	LocalPath          string    `protobuf:"bytes,11,opt,name=local_path,json=localPath,proto3" json:"local_path,omitempty"`
	Tag                string    `protobuf:"bytes,12,opt,name=tag,proto3" json:"tag,omitempty"`
	ImportRef          string    `protobuf:"bytes,13,opt,name=import_ref,json=importRef,proto3" json:"import_ref,omitempty"`
	OverrideArgs       []string  `protobuf:"bytes,3,rep,name=override_args,json=overrideArgs,proto3" json:"override_args,omitempty"`
	InitialPlatform    string    `protobuf:"bytes,4,opt,name=initial_platform,json=initialPlatform,proto3" json:"initial_platform,omitempty"`
	FinalPlatform      string    `protobuf:"bytes,8,opt,name=final_platform,json=finalPlatform,proto3" json:"final_platform,omitempty"`
	Runner             string    `protobuf:"bytes,9,opt,name=runner,proto3" json:"runner,omitempty"`
	Status             RunStatus `protobuf:"varint,5,opt,name=status,proto3,enum=api.public.logstream.RunStatus" json:"status,omitempty"`
	StartedAtUnixNanos uint64    `protobuf:"varint,6,opt,name=started_at_unix_nanos,json=startedAtUnixNanos,proto3" json:"started_at_unix_nanos,omitempty"`
	EndedAtUnixNanos   uint64    `protobuf:"varint,7,opt,name=ended_at_unix_nanos,json=endedAtUnixNanos,proto3" json:"ended_at_unix_nanos,omitempty"`
}

func (x *DeltaTargetManifest) Reset() {
	*x = DeltaTargetManifest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delta_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeltaTargetManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaTargetManifest) ProtoMessage() {}

func (x *DeltaTargetManifest) ProtoReflect() protoreflect.Message {
	mi := &file_delta_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaTargetManifest.ProtoReflect.Descriptor instead.
func (*DeltaTargetManifest) Descriptor() ([]byte, []int) {
	return file_delta_proto_rawDescGZIP(), []int{4}
}

func (x *DeltaTargetManifest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeltaTargetManifest) GetCanonicalName() string {
	if x != nil {
		return x.CanonicalName
	}
	return ""
}

func (x *DeltaTargetManifest) GetGitUrl() string {
	if x != nil {
		return x.GitUrl
	}
	return ""
}

func (x *DeltaTargetManifest) GetLocalPath() string {
	if x != nil {
		return x.LocalPath
	}
	return ""
}

func (x *DeltaTargetManifest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *DeltaTargetManifest) GetImportRef() string {
	if x != nil {
		return x.ImportRef
	}
	return ""
}

func (x *DeltaTargetManifest) GetOverrideArgs() []string {
	if x != nil {
		return x.OverrideArgs
	}
	return nil
}

func (x *DeltaTargetManifest) GetInitialPlatform() string {
	if x != nil {
		return x.InitialPlatform
	}
	return ""
}

func (x *DeltaTargetManifest) GetFinalPlatform() string {
	if x != nil {
		return x.FinalPlatform
	}
	return ""
}

func (x *DeltaTargetManifest) GetRunner() string {
	if x != nil {
		return x.Runner
	}
	return ""
}

func (x *DeltaTargetManifest) GetStatus() RunStatus {
	if x != nil {
		return x.Status
	}
	return RunStatus_RUN_STATUS_UNKNOWN
}

func (x *DeltaTargetManifest) GetStartedAtUnixNanos() uint64 {
	if x != nil {
		return x.StartedAtUnixNanos
	}
	return 0
}

func (x *DeltaTargetManifest) GetEndedAtUnixNanos() uint64 {
	if x != nil {
		return x.EndedAtUnixNanos
	}
	return 0
}

type DeltaCommandManifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TargetId           string          `protobuf:"bytes,17,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Category           string          `protobuf:"bytes,19,opt,name=category,proto3" json:"category,omitempty"`
	Platform           string          `protobuf:"bytes,18,opt,name=platform,proto3" json:"platform,omitempty"`
	Status             RunStatus       `protobuf:"varint,2,opt,name=status,proto3,enum=api.public.logstream.RunStatus" json:"status,omitempty"`
	HasCached          bool            `protobuf:"varint,3,opt,name=has_cached,json=hasCached,proto3" json:"has_cached,omitempty"`
	IsCached           bool            `protobuf:"varint,4,opt,name=is_cached,json=isCached,proto3" json:"is_cached,omitempty"`
	HasLocal           bool            `protobuf:"varint,7,opt,name=has_local,json=hasLocal,proto3" json:"has_local,omitempty"`
	IsLocal            bool            `protobuf:"varint,8,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`
	HasInteractive     bool            `protobuf:"varint,20,opt,name=has_interactive,json=hasInteractive,proto3" json:"has_interactive,omitempty"`
	IsInteractive      bool            `protobuf:"varint,21,opt,name=is_interactive,json=isInteractive,proto3" json:"is_interactive,omitempty"`
	StartedAtUnixNanos uint64          `protobuf:"varint,9,opt,name=started_at_unix_nanos,json=startedAtUnixNanos,proto3" json:"started_at_unix_nanos,omitempty"`
	EndedAtUnixNanos   uint64          `protobuf:"varint,10,opt,name=ended_at_unix_nanos,json=endedAtUnixNanos,proto3" json:"ended_at_unix_nanos,omitempty"`
	HasHasProgress     bool            `protobuf:"varint,11,opt,name=has_has_progress,json=hasHasProgress,proto3" json:"has_has_progress,omitempty"`
	HasProgress        bool            `protobuf:"varint,12,opt,name=has_progress,json=hasProgress,proto3" json:"has_progress,omitempty"`
	Progress           int32           `protobuf:"varint,13,opt,name=progress,proto3" json:"progress,omitempty"`
	ErrorMessage       string          `protobuf:"bytes,14,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	HasSourceLocation  bool            `protobuf:"varint,16,opt,name=has_source_location,json=hasSourceLocation,proto3" json:"has_source_location,omitempty"`
	SourceLocation     *SourceLocation `protobuf:"bytes,15,opt,name=source_location,json=sourceLocation,proto3" json:"source_location,omitempty"`
}

func (x *DeltaCommandManifest) Reset() {
	*x = DeltaCommandManifest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delta_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeltaCommandManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaCommandManifest) ProtoMessage() {}

func (x *DeltaCommandManifest) ProtoReflect() protoreflect.Message {
	mi := &file_delta_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaCommandManifest.ProtoReflect.Descriptor instead.
func (*DeltaCommandManifest) Descriptor() ([]byte, []int) {
	return file_delta_proto_rawDescGZIP(), []int{5}
}

func (x *DeltaCommandManifest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeltaCommandManifest) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *DeltaCommandManifest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DeltaCommandManifest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *DeltaCommandManifest) GetStatus() RunStatus {
	if x != nil {
		return x.Status
	}
	return RunStatus_RUN_STATUS_UNKNOWN
}

func (x *DeltaCommandManifest) GetHasCached() bool {
	if x != nil {
		return x.HasCached
	}
	return false
}

func (x *DeltaCommandManifest) GetIsCached() bool {
	if x != nil {
		return x.IsCached
	}
	return false
}

func (x *DeltaCommandManifest) GetHasLocal() bool {
	if x != nil {
		return x.HasLocal
	}
	return false
}

func (x *DeltaCommandManifest) GetIsLocal() bool {
	if x != nil {
		return x.IsLocal
	}
	return false
}

func (x *DeltaCommandManifest) GetHasInteractive() bool {
	if x != nil {
		return x.HasInteractive
	}
	return false
}

func (x *DeltaCommandManifest) GetIsInteractive() bool {
	if x != nil {
		return x.IsInteractive
	}
	return false
}

func (x *DeltaCommandManifest) GetStartedAtUnixNanos() uint64 {
	if x != nil {
		return x.StartedAtUnixNanos
	}
	return 0
}

func (x *DeltaCommandManifest) GetEndedAtUnixNanos() uint64 {
	if x != nil {
		return x.EndedAtUnixNanos
	}
	return 0
}

func (x *DeltaCommandManifest) GetHasHasProgress() bool {
	if x != nil {
		return x.HasHasProgress
	}
	return false
}

func (x *DeltaCommandManifest) GetHasProgress() bool {
	if x != nil {
		return x.HasProgress
	}
	return false
}

func (x *DeltaCommandManifest) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *DeltaCommandManifest) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *DeltaCommandManifest) GetHasSourceLocation() bool {
	if x != nil {
		return x.HasSourceLocation
	}
	return false
}

func (x *DeltaCommandManifest) GetSourceLocation() *SourceLocation {
	if x != nil {
		return x.SourceLocation
	}
	return nil
}

type DeltaManifest_ResumeBuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildId     string `protobuf:"bytes,1,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	Token       string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	OrgName     string `protobuf:"bytes,3,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	ProjectName string `protobuf:"bytes,4,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
}

func (x *DeltaManifest_ResumeBuild) Reset() {
	*x = DeltaManifest_ResumeBuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delta_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeltaManifest_ResumeBuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaManifest_ResumeBuild) ProtoMessage() {}

func (x *DeltaManifest_ResumeBuild) ProtoReflect() protoreflect.Message {
	mi := &file_delta_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaManifest_ResumeBuild.ProtoReflect.Descriptor instead.
func (*DeltaManifest_ResumeBuild) Descriptor() ([]byte, []int) {
	return file_delta_proto_rawDescGZIP(), []int{3, 0}
}

func (x *DeltaManifest_ResumeBuild) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *DeltaManifest_ResumeBuild) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *DeltaManifest_ResumeBuild) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *DeltaManifest_ResumeBuild) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type DeltaManifest_FieldsDelta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainTargetId       string                           `protobuf:"bytes,8,opt,name=main_target_id,json=mainTargetId,proto3" json:"main_target_id,omitempty"`
	StartedAtUnixNanos uint64                           `protobuf:"varint,1,opt,name=started_at_unix_nanos,json=startedAtUnixNanos,proto3" json:"started_at_unix_nanos,omitempty"`
	EndedAtUnixNanos   uint64                           `protobuf:"varint,2,opt,name=ended_at_unix_nanos,json=endedAtUnixNanos,proto3" json:"ended_at_unix_nanos,omitempty"`
	Status             RunStatus                        `protobuf:"varint,3,opt,name=status,proto3,enum=api.public.logstream.RunStatus" json:"status,omitempty"`
	HasFailure         bool                             `protobuf:"varint,6,opt,name=has_failure,json=hasFailure,proto3" json:"has_failure,omitempty"`
	Failure            *Failure                         `protobuf:"bytes,4,opt,name=failure,proto3" json:"failure,omitempty"`
	Targets            map[string]*DeltaTargetManifest  `protobuf:"bytes,5,rep,name=targets,proto3" json:"targets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Commands           map[string]*DeltaCommandManifest `protobuf:"bytes,7,rep,name=commands,proto3" json:"commands,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeltaManifest_FieldsDelta) Reset() {
	*x = DeltaManifest_FieldsDelta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_delta_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeltaManifest_FieldsDelta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaManifest_FieldsDelta) ProtoMessage() {}

func (x *DeltaManifest_FieldsDelta) ProtoReflect() protoreflect.Message {
	mi := &file_delta_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaManifest_FieldsDelta.ProtoReflect.Descriptor instead.
func (*DeltaManifest_FieldsDelta) Descriptor() ([]byte, []int) {
	return file_delta_proto_rawDescGZIP(), []int{3, 1}
}

func (x *DeltaManifest_FieldsDelta) GetMainTargetId() string {
	if x != nil {
		return x.MainTargetId
	}
	return ""
}

func (x *DeltaManifest_FieldsDelta) GetStartedAtUnixNanos() uint64 {
	if x != nil {
		return x.StartedAtUnixNanos
	}
	return 0
}

func (x *DeltaManifest_FieldsDelta) GetEndedAtUnixNanos() uint64 {
	if x != nil {
		return x.EndedAtUnixNanos
	}
	return 0
}

func (x *DeltaManifest_FieldsDelta) GetStatus() RunStatus {
	if x != nil {
		return x.Status
	}
	return RunStatus_RUN_STATUS_UNKNOWN
}

func (x *DeltaManifest_FieldsDelta) GetHasFailure() bool {
	if x != nil {
		return x.HasFailure
	}
	return false
}

func (x *DeltaManifest_FieldsDelta) GetFailure() *Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *DeltaManifest_FieldsDelta) GetTargets() map[string]*DeltaTargetManifest {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *DeltaManifest_FieldsDelta) GetCommands() map[string]*DeltaCommandManifest {
	if x != nil {
		return x.Commands
	}
	return nil
}

var File_delta_proto protoreflect.FileDescriptor

var file_delta_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x1a, 0x0e, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x02, 0x0a, 0x05, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6c,
	0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x4c, 0x6f, 0x67, 0x12, 0x59, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x42,
	0x12, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x22, 0xa4, 0x01, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4c, 0x6f, 0x67,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69,
	0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x76, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e,
	0x61, 0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xab, 0x08, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x6c,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x52,
	0x75, 0x6e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x49, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x49, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61,
	0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x1a, 0x7c, 0x0a, 0x0b,
	0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xab, 0x05, 0x0a, 0x0b, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x75,
	0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61,
	0x6e, 0x6f, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f,
	0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e,
	0x6f, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68,
	0x61, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x68, 0x61, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x07,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x59, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x1a, 0x65, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x67, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c,
	0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x22, 0xe3, 0x03, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x69, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x66, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x55, 0x6e,
	0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x55, 0x6e, 0x69,
	0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x22, 0x8a, 0x06, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x68, 0x61, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x55,
	0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x55, 0x6e,
	0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x68,
	0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x48, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x68, 0x61, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07,
	0x52, 0x07, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x52, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x70,
	0x75, 0x73, 0x68, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_delta_proto_rawDescOnce sync.Once
	file_delta_proto_rawDescData = file_delta_proto_rawDesc
)

func file_delta_proto_rawDescGZIP() []byte {
	file_delta_proto_rawDescOnce.Do(func() {
		file_delta_proto_rawDescData = protoimpl.X.CompressGZIP(file_delta_proto_rawDescData)
	})
	return file_delta_proto_rawDescData
}

var file_delta_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_delta_proto_goTypes = []interface{}{
	(*Delta)(nil),                     // 0: api.public.logstream.Delta
	(*DeltaLog)(nil),                  // 1: api.public.logstream.DeltaLog
	(*DeltaFormattedLog)(nil),         // 2: api.public.logstream.DeltaFormattedLog
	(*DeltaManifest)(nil),             // 3: api.public.logstream.DeltaManifest
	(*DeltaTargetManifest)(nil),       // 4: api.public.logstream.DeltaTargetManifest
	(*DeltaCommandManifest)(nil),      // 5: api.public.logstream.DeltaCommandManifest
	(*DeltaManifest_ResumeBuild)(nil), // 6: api.public.logstream.DeltaManifest.ResumeBuild
	(*DeltaManifest_FieldsDelta)(nil), // 7: api.public.logstream.DeltaManifest.FieldsDelta
	nil,                               // 8: api.public.logstream.DeltaManifest.FieldsDelta.TargetsEntry
	nil,                               // 9: api.public.logstream.DeltaManifest.FieldsDelta.CommandsEntry
	(*RunManifest)(nil),               // 10: api.public.logstream.RunManifest
	(RunStatus)(0),                    // 11: api.public.logstream.RunStatus
	(*SourceLocation)(nil),            // 12: api.public.logstream.SourceLocation
	(*Failure)(nil),                   // 13: api.public.logstream.Failure
}
var file_delta_proto_depIdxs = []int32{
	3,  // 0: api.public.logstream.Delta.delta_manifest:type_name -> api.public.logstream.DeltaManifest
	1,  // 1: api.public.logstream.Delta.delta_log:type_name -> api.public.logstream.DeltaLog
	2,  // 2: api.public.logstream.Delta.delta_formatted_log:type_name -> api.public.logstream.DeltaFormattedLog
	10, // 3: api.public.logstream.DeltaManifest.reset_all:type_name -> api.public.logstream.RunManifest
	7,  // 4: api.public.logstream.DeltaManifest.fields:type_name -> api.public.logstream.DeltaManifest.FieldsDelta
	6,  // 5: api.public.logstream.DeltaManifest.resume:type_name -> api.public.logstream.DeltaManifest.ResumeBuild
	11, // 6: api.public.logstream.DeltaTargetManifest.status:type_name -> api.public.logstream.RunStatus
	11, // 7: api.public.logstream.DeltaCommandManifest.status:type_name -> api.public.logstream.RunStatus
	12, // 8: api.public.logstream.DeltaCommandManifest.source_location:type_name -> api.public.logstream.SourceLocation
	11, // 9: api.public.logstream.DeltaManifest.FieldsDelta.status:type_name -> api.public.logstream.RunStatus
	13, // 10: api.public.logstream.DeltaManifest.FieldsDelta.failure:type_name -> api.public.logstream.Failure
	8,  // 11: api.public.logstream.DeltaManifest.FieldsDelta.targets:type_name -> api.public.logstream.DeltaManifest.FieldsDelta.TargetsEntry
	9,  // 12: api.public.logstream.DeltaManifest.FieldsDelta.commands:type_name -> api.public.logstream.DeltaManifest.FieldsDelta.CommandsEntry
	4,  // 13: api.public.logstream.DeltaManifest.FieldsDelta.TargetsEntry.value:type_name -> api.public.logstream.DeltaTargetManifest
	5,  // 14: api.public.logstream.DeltaManifest.FieldsDelta.CommandsEntry.value:type_name -> api.public.logstream.DeltaCommandManifest
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_delta_proto_init() }
func file_delta_proto_init() {
	if File_delta_proto != nil {
		return
	}
	file_manifest_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_delta_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Delta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delta_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeltaLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delta_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeltaFormattedLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delta_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeltaManifest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delta_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeltaTargetManifest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delta_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeltaCommandManifest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delta_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeltaManifest_ResumeBuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_delta_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeltaManifest_FieldsDelta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_delta_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Delta_DeltaManifest)(nil),
		(*Delta_DeltaLog)(nil),
		(*Delta_DeltaFormattedLog)(nil),
	}
	file_delta_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*DeltaManifest_ResetAll)(nil),
		(*DeltaManifest_Fields)(nil),
		(*DeltaManifest_Resume)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_delta_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_delta_proto_goTypes,
		DependencyIndexes: file_delta_proto_depIdxs,
		MessageInfos:      file_delta_proto_msgTypes,
	}.Build()
	File_delta_proto = out.File
	file_delta_proto_rawDesc = nil
	file_delta_proto_goTypes = nil
	file_delta_proto_depIdxs = nil
}
