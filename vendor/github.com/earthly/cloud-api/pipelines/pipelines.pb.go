// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: pipelines.proto

package pipelines

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SatelliteStatus int32

const (
	SatelliteStatus_SATELLITE_STATUS_UNKNOWN     SatelliteStatus = 0
	SatelliteStatus_SATELLITE_STATUS_CREATING    SatelliteStatus = 1
	SatelliteStatus_SATELLITE_STATUS_OPERATIONAL SatelliteStatus = 2
	SatelliteStatus_SATELLITE_STATUS_OFFLINE     SatelliteStatus = 3
	SatelliteStatus_SATELLITE_STATUS_DESTROYING  SatelliteStatus = 4
	SatelliteStatus_SATELLITE_STATUS_FAILED      SatelliteStatus = 5
	SatelliteStatus_SATELLITE_STATUS_SLEEP       SatelliteStatus = 6
	SatelliteStatus_SATELLITE_STATUS_STARTING    SatelliteStatus = 7
	SatelliteStatus_SATELLITE_STATUS_STOPPING    SatelliteStatus = 8
)

// Enum value maps for SatelliteStatus.
var (
	SatelliteStatus_name = map[int32]string{
		0: "SATELLITE_STATUS_UNKNOWN",
		1: "SATELLITE_STATUS_CREATING",
		2: "SATELLITE_STATUS_OPERATIONAL",
		3: "SATELLITE_STATUS_OFFLINE",
		4: "SATELLITE_STATUS_DESTROYING",
		5: "SATELLITE_STATUS_FAILED",
		6: "SATELLITE_STATUS_SLEEP",
		7: "SATELLITE_STATUS_STARTING",
		8: "SATELLITE_STATUS_STOPPING",
	}
	SatelliteStatus_value = map[string]int32{
		"SATELLITE_STATUS_UNKNOWN":     0,
		"SATELLITE_STATUS_CREATING":    1,
		"SATELLITE_STATUS_OPERATIONAL": 2,
		"SATELLITE_STATUS_OFFLINE":     3,
		"SATELLITE_STATUS_DESTROYING":  4,
		"SATELLITE_STATUS_FAILED":      5,
		"SATELLITE_STATUS_SLEEP":       6,
		"SATELLITE_STATUS_STARTING":    7,
		"SATELLITE_STATUS_STOPPING":    8,
	}
)

func (x SatelliteStatus) Enum() *SatelliteStatus {
	p := new(SatelliteStatus)
	*p = x
	return p
}

func (x SatelliteStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SatelliteStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pipelines_proto_enumTypes[0].Descriptor()
}

func (SatelliteStatus) Type() protoreflect.EnumType {
	return &file_pipelines_proto_enumTypes[0]
}

func (x SatelliteStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SatelliteStatus.Descriptor instead.
func (SatelliteStatus) EnumDescriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{0}
}

type TriggerType int32

const (
	TriggerType_TRIGGER_TYPE_UNSPECIFIED TriggerType = 0
	TriggerType_TRIGGER_TYPE_MANUAL      TriggerType = 1
	TriggerType_TRIGGER_TYPE_PUSH        TriggerType = 2
	TriggerType_TRIGGER_TYPE_PR          TriggerType = 3
)

// Enum value maps for TriggerType.
var (
	TriggerType_name = map[int32]string{
		0: "TRIGGER_TYPE_UNSPECIFIED",
		1: "TRIGGER_TYPE_MANUAL",
		2: "TRIGGER_TYPE_PUSH",
		3: "TRIGGER_TYPE_PR",
	}
	TriggerType_value = map[string]int32{
		"TRIGGER_TYPE_UNSPECIFIED": 0,
		"TRIGGER_TYPE_MANUAL":      1,
		"TRIGGER_TYPE_PUSH":        2,
		"TRIGGER_TYPE_PR":          3,
	}
)

func (x TriggerType) Enum() *TriggerType {
	p := new(TriggerType)
	*p = x
	return p
}

func (x TriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_pipelines_proto_enumTypes[1].Descriptor()
}

func (TriggerType) Type() protoreflect.EnumType {
	return &file_pipelines_proto_enumTypes[1]
}

func (x TriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerType.Descriptor instead.
func (TriggerType) EnumDescriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{1}
}

type PipelineStatus int32

const (
	PipelineStatus_STATUS_UNKNOWN PipelineStatus = 0
	PipelineStatus_STATUS_OK      PipelineStatus = 1
	PipelineStatus_STATUS_ERROR   PipelineStatus = 2
)

// Enum value maps for PipelineStatus.
var (
	PipelineStatus_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_ERROR",
	}
	PipelineStatus_value = map[string]int32{
		"STATUS_UNKNOWN": 0,
		"STATUS_OK":      1,
		"STATUS_ERROR":   2,
	}
)

func (x PipelineStatus) Enum() *PipelineStatus {
	p := new(PipelineStatus)
	*p = x
	return p
}

func (x PipelineStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pipelines_proto_enumTypes[2].Descriptor()
}

func (PipelineStatus) Type() protoreflect.EnumType {
	return &file_pipelines_proto_enumTypes[2]
}

func (x PipelineStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineStatus.Descriptor instead.
func (PipelineStatus) EnumDescriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{2}
}

type PipelineErrorCode int32

const (
	PipelineErrorCode_ERROR_UNKNOWN PipelineErrorCode = 0
	PipelineErrorCode_ERROR_NONE    PipelineErrorCode = 1
	PipelineErrorCode_ERROR_PAYMENT PipelineErrorCode = 2
	PipelineErrorCode_ERROR_PARSING PipelineErrorCode = 3
	PipelineErrorCode_ERROR_PROJECT PipelineErrorCode = 4
)

// Enum value maps for PipelineErrorCode.
var (
	PipelineErrorCode_name = map[int32]string{
		0: "ERROR_UNKNOWN",
		1: "ERROR_NONE",
		2: "ERROR_PAYMENT",
		3: "ERROR_PARSING",
		4: "ERROR_PROJECT",
	}
	PipelineErrorCode_value = map[string]int32{
		"ERROR_UNKNOWN": 0,
		"ERROR_NONE":    1,
		"ERROR_PAYMENT": 2,
		"ERROR_PARSING": 3,
		"ERROR_PROJECT": 4,
	}
)

func (x PipelineErrorCode) Enum() *PipelineErrorCode {
	p := new(PipelineErrorCode)
	*p = x
	return p
}

func (x PipelineErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pipelines_proto_enumTypes[3].Descriptor()
}

func (PipelineErrorCode) Type() protoreflect.EnumType {
	return &file_pipelines_proto_enumTypes[3]
}

func (x PipelineErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineErrorCode.Descriptor instead.
func (PipelineErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{3}
}

type ParsingErrorCode int32

const (
	// Shouldn't be used
	ParsingErrorCode_PARSING_ERROR_UNKNOWN ParsingErrorCode = 0
	// PARSING_ERROR_PARSE_GENERIC means there wasn't another appropriate error code to assign this to
	ParsingErrorCode_PARSING_ERROR_PARSE_GENERIC ParsingErrorCode = 1
	// PARSING_ERROR_INVALID means there was an error parsing the Earthfile because it is invalid
	ParsingErrorCode_PARSING_ERROR_INVALID ParsingErrorCode = 2
	// PARSING_ERROR_NOT_A_PIPELINE_FILE means the Earthfile was valid, but not considered a pipeline Earthfile
	ParsingErrorCode_PARSING_ERROR_NOT_A_PIPELINE_FILE ParsingErrorCode = 3
)

// Enum value maps for ParsingErrorCode.
var (
	ParsingErrorCode_name = map[int32]string{
		0: "PARSING_ERROR_UNKNOWN",
		1: "PARSING_ERROR_PARSE_GENERIC",
		2: "PARSING_ERROR_INVALID",
		3: "PARSING_ERROR_NOT_A_PIPELINE_FILE",
	}
	ParsingErrorCode_value = map[string]int32{
		"PARSING_ERROR_UNKNOWN":             0,
		"PARSING_ERROR_PARSE_GENERIC":       1,
		"PARSING_ERROR_INVALID":             2,
		"PARSING_ERROR_NOT_A_PIPELINE_FILE": 3,
	}
)

func (x ParsingErrorCode) Enum() *ParsingErrorCode {
	p := new(ParsingErrorCode)
	*p = x
	return p
}

func (x ParsingErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParsingErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pipelines_proto_enumTypes[4].Descriptor()
}

func (ParsingErrorCode) Type() protoreflect.EnumType {
	return &file_pipelines_proto_enumTypes[4]
}

func (x ParsingErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParsingErrorCode.Descriptor instead.
func (ParsingErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{4}
}

type RunStatus int32

const (
	RunStatus_RUN_STATUS_UNSPECIFIED RunStatus = 0
	RunStatus_RUN_STATUS_PENDING     RunStatus = 1
	RunStatus_RUN_STATUS_STARTED     RunStatus = 2
	RunStatus_RUN_STATUS_SUCCESS     RunStatus = 3
	RunStatus_RUN_STATUS_FAILED      RunStatus = 4
)

// Enum value maps for RunStatus.
var (
	RunStatus_name = map[int32]string{
		0: "RUN_STATUS_UNSPECIFIED",
		1: "RUN_STATUS_PENDING",
		2: "RUN_STATUS_STARTED",
		3: "RUN_STATUS_SUCCESS",
		4: "RUN_STATUS_FAILED",
	}
	RunStatus_value = map[string]int32{
		"RUN_STATUS_UNSPECIFIED": 0,
		"RUN_STATUS_PENDING":     1,
		"RUN_STATUS_STARTED":     2,
		"RUN_STATUS_SUCCESS":     3,
		"RUN_STATUS_FAILED":      4,
	}
)

func (x RunStatus) Enum() *RunStatus {
	p := new(RunStatus)
	*p = x
	return p
}

func (x RunStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pipelines_proto_enumTypes[5].Descriptor()
}

func (RunStatus) Type() protoreflect.EnumType {
	return &file_pipelines_proto_enumTypes[5]
}

func (x RunStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunStatus.Descriptor instead.
func (RunStatus) EnumDescriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{5}
}

type SyncStatusType int32

const (
	SyncStatusType_SYNC_STATUS_UNKNOWN SyncStatusType = 0
	SyncStatusType_SYNC_STATUS_OK      SyncStatusType = 1
	SyncStatusType_SYNC_STATUS_ERROR   SyncStatusType = 2
)

// Enum value maps for SyncStatusType.
var (
	SyncStatusType_name = map[int32]string{
		0: "SYNC_STATUS_UNKNOWN",
		1: "SYNC_STATUS_OK",
		2: "SYNC_STATUS_ERROR",
	}
	SyncStatusType_value = map[string]int32{
		"SYNC_STATUS_UNKNOWN": 0,
		"SYNC_STATUS_OK":      1,
		"SYNC_STATUS_ERROR":   2,
	}
)

func (x SyncStatusType) Enum() *SyncStatusType {
	p := new(SyncStatusType)
	*p = x
	return p
}

func (x SyncStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_pipelines_proto_enumTypes[6].Descriptor()
}

func (SyncStatusType) Type() protoreflect.EnumType {
	return &file_pipelines_proto_enumTypes[6]
}

func (x SyncStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncStatusType.Descriptor instead.
func (SyncStatusType) EnumDescriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{6}
}

type SyncErrorCode int32

const (
	SyncErrorCode_SYNC_ERROR_UNKNOWN SyncErrorCode = 0
	SyncErrorCode_SYNC_ERROR_NONE    SyncErrorCode = 1
	SyncErrorCode_SYNC_ERROR_PARSING SyncErrorCode = 2
	SyncErrorCode_SYNC_ERROR_PAYMENT SyncErrorCode = 3
	SyncErrorCode_SYNC_ERROR_OTHER   SyncErrorCode = 4
)

// Enum value maps for SyncErrorCode.
var (
	SyncErrorCode_name = map[int32]string{
		0: "SYNC_ERROR_UNKNOWN",
		1: "SYNC_ERROR_NONE",
		2: "SYNC_ERROR_PARSING",
		3: "SYNC_ERROR_PAYMENT",
		4: "SYNC_ERROR_OTHER",
	}
	SyncErrorCode_value = map[string]int32{
		"SYNC_ERROR_UNKNOWN": 0,
		"SYNC_ERROR_NONE":    1,
		"SYNC_ERROR_PARSING": 2,
		"SYNC_ERROR_PAYMENT": 3,
		"SYNC_ERROR_OTHER":   4,
	}
)

func (x SyncErrorCode) Enum() *SyncErrorCode {
	p := new(SyncErrorCode)
	*p = x
	return p
}

func (x SyncErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SyncErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_pipelines_proto_enumTypes[7].Descriptor()
}

func (SyncErrorCode) Type() protoreflect.EnumType {
	return &file_pipelines_proto_enumTypes[7]
}

func (x SyncErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SyncErrorCode.Descriptor instead.
func (SyncErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{7}
}

type GetOrgLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgName string `protobuf:"bytes,1,opt,name=orgName,proto3" json:"orgName,omitempty"`
}

func (x *GetOrgLimitsRequest) Reset() {
	*x = GetOrgLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgLimitsRequest) ProtoMessage() {}

func (x *GetOrgLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgLimitsRequest.ProtoReflect.Descriptor instead.
func (*GetOrgLimitsRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{0}
}

func (x *GetOrgLimitsRequest) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

type GetOrgLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPipelinesPerProject   int32 `protobuf:"varint,1,opt,name=max_pipelines_per_project,json=maxPipelinesPerProject,proto3" json:"max_pipelines_per_project,omitempty"`
	MaxProjectsWithPipelines int32 `protobuf:"varint,2,opt,name=max_projects_with_pipelines,json=maxProjectsWithPipelines,proto3" json:"max_projects_with_pipelines,omitempty"`
	ProjectRoom              int32 `protobuf:"varint,3,opt,name=project_room,json=projectRoom,proto3" json:"project_room,omitempty"`
}

func (x *GetOrgLimitsResponse) Reset() {
	*x = GetOrgLimitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgLimitsResponse) ProtoMessage() {}

func (x *GetOrgLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgLimitsResponse.ProtoReflect.Descriptor instead.
func (*GetOrgLimitsResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{1}
}

func (x *GetOrgLimitsResponse) GetMaxPipelinesPerProject() int32 {
	if x != nil {
		return x.MaxPipelinesPerProject
	}
	return 0
}

func (x *GetOrgLimitsResponse) GetMaxProjectsWithPipelines() int32 {
	if x != nil {
		return x.MaxProjectsWithPipelines
	}
	return 0
}

func (x *GetOrgLimitsResponse) GetProjectRoom() int32 {
	if x != nil {
		return x.ProjectRoom
	}
	return 0
}

type ManualBuildRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId      string    `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ProjectId  string    `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PipelineId string    `protobuf:"bytes,3,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	Targets    []*Target `protobuf:"bytes,4,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *ManualBuildRequest) Reset() {
	*x = ManualBuildRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualBuildRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualBuildRequest) ProtoMessage() {}

func (x *ManualBuildRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualBuildRequest.ProtoReflect.Descriptor instead.
func (*ManualBuildRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{2}
}

func (x *ManualBuildRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ManualBuildRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ManualBuildRequest) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *ManualBuildRequest) GetTargets() []*Target {
	if x != nil {
		return x.Targets
	}
	return nil
}

type ManualBuildResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuildId string `protobuf:"bytes,1,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
}

func (x *ManualBuildResponse) Reset() {
	*x = ManualBuildResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualBuildResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualBuildResponse) ProtoMessage() {}

func (x *ManualBuildResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualBuildResponse.ProtoReflect.Descriptor instead.
func (*ManualBuildResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{3}
}

func (x *ManualBuildResponse) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

type Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reference string          `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty"`
	Args      []*TargetArg    `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Secrets   []*TargetSecret `protobuf:"bytes,4,rep,name=secrets,proto3" json:"secrets,omitempty"`
}

func (x *Target) Reset() {
	*x = Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{4}
}

func (x *Target) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *Target) GetArgs() []*TargetArg {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Target) GetSecrets() []*TargetSecret {
	if x != nil {
		return x.Secrets
	}
	return nil
}

type TargetArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TargetArg) Reset() {
	*x = TargetArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetArg) ProtoMessage() {}

func (x *TargetArg) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetArg.ProtoReflect.Descriptor instead.
func (*TargetArg) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{5}
}

func (x *TargetArg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TargetArg) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type TargetSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TargetSecret) Reset() {
	*x = TargetSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetSecret) ProtoMessage() {}

func (x *TargetSecret) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetSecret.ProtoReflect.Descriptor instead.
func (*TargetSecret) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{6}
}

func (x *TargetSecret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TargetSecret) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type LaunchSatelliteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId        string   `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name         string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`         // characters should be valid within a URL
	Platform     string   `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"` // Supported values now are: linux/amd64, linux/arm64
	FeatureFlags []string `protobuf:"bytes,4,rep,name=feature_flags,json=featureFlags,proto3" json:"feature_flags,omitempty"`
}

func (x *LaunchSatelliteRequest) Reset() {
	*x = LaunchSatelliteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchSatelliteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchSatelliteRequest) ProtoMessage() {}

func (x *LaunchSatelliteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchSatelliteRequest.ProtoReflect.Descriptor instead.
func (*LaunchSatelliteRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{7}
}

func (x *LaunchSatelliteRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *LaunchSatelliteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LaunchSatelliteRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *LaunchSatelliteRequest) GetFeatureFlags() []string {
	if x != nil {
		return x.FeatureFlags
	}
	return nil
}

type LaunchSatelliteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  SatelliteStatus `protobuf:"varint,1,opt,name=status,proto3,enum=api.public.pipelines.SatelliteStatus" json:"status,omitempty"`
	Version string          `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"` // deprecated
}

func (x *LaunchSatelliteResponse) Reset() {
	*x = LaunchSatelliteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchSatelliteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchSatelliteResponse) ProtoMessage() {}

func (x *LaunchSatelliteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchSatelliteResponse.ProtoReflect.Descriptor instead.
func (*LaunchSatelliteResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{8}
}

func (x *LaunchSatelliteResponse) GetStatus() SatelliteStatus {
	if x != nil {
		return x.Status
	}
	return SatelliteStatus_SATELLITE_STATUS_UNKNOWN
}

func (x *LaunchSatelliteResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ListSatellitesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *ListSatellitesRequest) Reset() {
	*x = ListSatellitesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSatellitesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSatellitesRequest) ProtoMessage() {}

func (x *ListSatellitesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSatellitesRequest.ProtoReflect.Descriptor instead.
func (*ListSatellitesRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{9}
}

func (x *ListSatellitesRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type ListSatellitesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*ListSatellitesResponse_SatelliteInstance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *ListSatellitesResponse) Reset() {
	*x = ListSatellitesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSatellitesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSatellitesResponse) ProtoMessage() {}

func (x *ListSatellitesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSatellitesResponse.ProtoReflect.Descriptor instead.
func (*ListSatellitesResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{10}
}

func (x *ListSatellitesResponse) GetInstances() []*ListSatellitesResponse_SatelliteInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

type UpdateSatelliteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UpdateSatelliteRequest) Reset() {
	*x = UpdateSatelliteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSatelliteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSatelliteRequest) ProtoMessage() {}

func (x *UpdateSatelliteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSatelliteRequest.ProtoReflect.Descriptor instead.
func (*UpdateSatelliteRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateSatelliteRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *UpdateSatelliteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateSatelliteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSatelliteResponse) Reset() {
	*x = UpdateSatelliteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSatelliteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSatelliteResponse) ProtoMessage() {}

func (x *UpdateSatelliteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSatelliteResponse.ProtoReflect.Descriptor instead.
func (*UpdateSatelliteResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{12}
}

type DeleteSatelliteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteSatelliteRequest) Reset() {
	*x = DeleteSatelliteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSatelliteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSatelliteRequest) ProtoMessage() {}

func (x *DeleteSatelliteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSatelliteRequest.ProtoReflect.Descriptor instead.
func (*DeleteSatelliteRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteSatelliteRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *DeleteSatelliteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteSatelliteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSatelliteResponse) Reset() {
	*x = DeleteSatelliteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSatelliteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSatelliteResponse) ProtoMessage() {}

func (x *DeleteSatelliteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSatelliteResponse.ProtoReflect.Descriptor instead.
func (*DeleteSatelliteResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{14}
}

type GetSatelliteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSatelliteRequest) Reset() {
	*x = GetSatelliteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSatelliteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSatelliteRequest) ProtoMessage() {}

func (x *GetSatelliteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSatelliteRequest.ProtoReflect.Descriptor instead.
func (*GetSatelliteRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{15}
}

func (x *GetSatelliteRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *GetSatelliteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetSatelliteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string          `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Platform   string          `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	Status     SatelliteStatus `protobuf:"varint,3,opt,name=status,proto3,enum=api.public.pipelines.SatelliteStatus" json:"status,omitempty"`
	Version    string          `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"` // deprecated
	Id         string          `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	PrivateIp  string          `protobuf:"bytes,6,opt,name=private_ip,json=privateIp,proto3" json:"private_ip,omitempty"`
	PrivateDns string          `protobuf:"bytes,7,opt,name=private_dns,json=privateDns,proto3" json:"private_dns,omitempty"`
}

func (x *GetSatelliteResponse) Reset() {
	*x = GetSatelliteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSatelliteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSatelliteResponse) ProtoMessage() {}

func (x *GetSatelliteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSatelliteResponse.ProtoReflect.Descriptor instead.
func (*GetSatelliteResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{16}
}

func (x *GetSatelliteResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetSatelliteResponse) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetSatelliteResponse) GetStatus() SatelliteStatus {
	if x != nil {
		return x.Status
	}
	return SatelliteStatus_SATELLITE_STATUS_UNKNOWN
}

func (x *GetSatelliteResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetSatelliteResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetSatelliteResponse) GetPrivateIp() string {
	if x != nil {
		return x.PrivateIp
	}
	return ""
}

func (x *GetSatelliteResponse) GetPrivateDns() string {
	if x != nil {
		return x.PrivateDns
	}
	return ""
}

type WakeSatelliteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *WakeSatelliteRequest) Reset() {
	*x = WakeSatelliteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WakeSatelliteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WakeSatelliteRequest) ProtoMessage() {}

func (x *WakeSatelliteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WakeSatelliteRequest.ProtoReflect.Descriptor instead.
func (*WakeSatelliteRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{17}
}

func (x *WakeSatelliteRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *WakeSatelliteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type WakeSatelliteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// triggered_wake_up indicates if the satellite was asleep when the request
	// was made, and hence may take a short moment to wake back up.
	TriggeredWakeUp bool `protobuf:"varint,1,opt,name=triggered_wake_up,json=triggeredWakeUp,proto3" json:"triggered_wake_up,omitempty"`
}

func (x *WakeSatelliteResponse) Reset() {
	*x = WakeSatelliteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WakeSatelliteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WakeSatelliteResponse) ProtoMessage() {}

func (x *WakeSatelliteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WakeSatelliteResponse.ProtoReflect.Descriptor instead.
func (*WakeSatelliteResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{18}
}

func (x *WakeSatelliteResponse) GetTriggeredWakeUp() bool {
	if x != nil {
		return x.TriggeredWakeUp
	}
	return false
}

type ReserveSatelliteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ReserveSatelliteRequest) Reset() {
	*x = ReserveSatelliteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveSatelliteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveSatelliteRequest) ProtoMessage() {}

func (x *ReserveSatelliteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveSatelliteRequest.ProtoReflect.Descriptor instead.
func (*ReserveSatelliteRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{19}
}

func (x *ReserveSatelliteRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ReserveSatelliteRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ReserveSatelliteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status SatelliteStatus `protobuf:"varint,1,opt,name=status,proto3,enum=api.public.pipelines.SatelliteStatus" json:"status,omitempty"`
}

func (x *ReserveSatelliteResponse) Reset() {
	*x = ReserveSatelliteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReserveSatelliteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReserveSatelliteResponse) ProtoMessage() {}

func (x *ReserveSatelliteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReserveSatelliteResponse.ProtoReflect.Descriptor instead.
func (*ReserveSatelliteResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{20}
}

func (x *ReserveSatelliteResponse) GetStatus() SatelliteStatus {
	if x != nil {
		return x.Status
	}
	return SatelliteStatus_SATELLITE_STATUS_UNKNOWN
}

type ListRemoteReposRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Org string `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
}

func (x *ListRemoteReposRequest) Reset() {
	*x = ListRemoteReposRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRemoteReposRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRemoteReposRequest) ProtoMessage() {}

func (x *ListRemoteReposRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRemoteReposRequest.ProtoReflect.Descriptor instead.
func (*ListRemoteReposRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{21}
}

func (x *ListRemoteReposRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

type RemoteRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Org           string `protobuf:"bytes,2,opt,name=org,proto3" json:"org,omitempty"`
	Url           string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Provider      string `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	DefaultBranch string `protobuf:"bytes,5,opt,name=default_branch,json=defaultBranch,proto3" json:"default_branch,omitempty"`
}

func (x *RemoteRepo) Reset() {
	*x = RemoteRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteRepo) ProtoMessage() {}

func (x *RemoteRepo) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteRepo.ProtoReflect.Descriptor instead.
func (*RemoteRepo) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{22}
}

func (x *RemoteRepo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemoteRepo) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *RemoteRepo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RemoteRepo) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *RemoteRepo) GetDefaultBranch() string {
	if x != nil {
		return x.DefaultBranch
	}
	return ""
}

type ListRemoteReposResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repos []*RemoteRepo `protobuf:"bytes,1,rep,name=repos,proto3" json:"repos,omitempty"`
}

func (x *ListRemoteReposResponse) Reset() {
	*x = ListRemoteReposResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRemoteReposResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRemoteReposResponse) ProtoMessage() {}

func (x *ListRemoteReposResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRemoteReposResponse.ProtoReflect.Descriptor instead.
func (*ListRemoteReposResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{23}
}

func (x *ListRemoteReposResponse) GetRepos() []*RemoteRepo {
	if x != nil {
		return x.Repos
	}
	return nil
}

type ProjectRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Org         string                 `protobuf:"bytes,3,opt,name=org,proto3" json:"org,omitempty"`
	Url         string                 `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Provider    string                 `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	Project     string                 `protobuf:"bytes,6,opt,name=project,proto3" json:"project,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ProviderOrg string                 `protobuf:"bytes,8,opt,name=provider_org,json=providerOrg,proto3" json:"provider_org,omitempty"`
	// reference_branch is the branch used when syncing pipelines
	ReferenceBranch string `protobuf:"bytes,9,opt,name=reference_branch,json=referenceBranch,proto3" json:"reference_branch,omitempty"`
}

func (x *ProjectRepo) Reset() {
	*x = ProjectRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectRepo) ProtoMessage() {}

func (x *ProjectRepo) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectRepo.ProtoReflect.Descriptor instead.
func (*ProjectRepo) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{24}
}

func (x *ProjectRepo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProjectRepo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectRepo) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *ProjectRepo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ProjectRepo) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ProjectRepo) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ProjectRepo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProjectRepo) GetProviderOrg() string {
	if x != nil {
		return x.ProviderOrg
	}
	return ""
}

func (x *ProjectRepo) GetReferenceBranch() string {
	if x != nil {
		return x.ReferenceBranch
	}
	return ""
}

type AddProjectReposRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repos []*ProjectRepo `protobuf:"bytes,1,rep,name=repos,proto3" json:"repos,omitempty"`
	// sync_pipelines indicates whether this add call should also sync the pipelines for these repositories
	SyncPipelines bool `protobuf:"varint,2,opt,name=sync_pipelines,json=syncPipelines,proto3" json:"sync_pipelines,omitempty"`
}

func (x *AddProjectReposRequest) Reset() {
	*x = AddProjectReposRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProjectReposRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProjectReposRequest) ProtoMessage() {}

func (x *AddProjectReposRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProjectReposRequest.ProtoReflect.Descriptor instead.
func (*AddProjectReposRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{25}
}

func (x *AddProjectReposRequest) GetRepos() []*ProjectRepo {
	if x != nil {
		return x.Repos
	}
	return nil
}

func (x *AddProjectReposRequest) GetSyncPipelines() bool {
	if x != nil {
		return x.SyncPipelines
	}
	return false
}

type AddProjectReposResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repos []*ProjectRepo `protobuf:"bytes,1,rep,name=repos,proto3" json:"repos,omitempty"`
}

func (x *AddProjectReposResponse) Reset() {
	*x = AddProjectReposResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddProjectReposResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddProjectReposResponse) ProtoMessage() {}

func (x *AddProjectReposResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddProjectReposResponse.ProtoReflect.Descriptor instead.
func (*AddProjectReposResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{26}
}

func (x *AddProjectReposResponse) GetRepos() []*ProjectRepo {
	if x != nil {
		return x.Repos
	}
	return nil
}

type RemoveProjectRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveProjectRepoRequest) Reset() {
	*x = RemoveProjectRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveProjectRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveProjectRepoRequest) ProtoMessage() {}

func (x *RemoveProjectRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveProjectRepoRequest.ProtoReflect.Descriptor instead.
func (*RemoveProjectRepoRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{27}
}

func (x *RemoveProjectRepoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RemoveProjectRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveProjectRepoResponse) Reset() {
	*x = RemoveProjectRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveProjectRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveProjectRepoResponse) ProtoMessage() {}

func (x *RemoveProjectRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveProjectRepoResponse.ProtoReflect.Descriptor instead.
func (*RemoveProjectRepoResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{28}
}

type UpdateProjectRepoBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoId string `protobuf:"bytes,1,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	// reference_branch is the branch the pipeline definitions are retrieved from
	// Note: The pipelines themselves will still run on the branch a run is occurring on.
	ReferenceBranch string `protobuf:"bytes,2,opt,name=reference_branch,json=referenceBranch,proto3" json:"reference_branch,omitempty"`
	// force_sync will force a sync even if the branch already matches.
	// By default, no sync work is performed if we are setting the branch to the same value.
	ForceSync bool `protobuf:"varint,3,opt,name=force_sync,json=forceSync,proto3" json:"force_sync,omitempty"`
}

func (x *UpdateProjectRepoBranchRequest) Reset() {
	*x = UpdateProjectRepoBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectRepoBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectRepoBranchRequest) ProtoMessage() {}

func (x *UpdateProjectRepoBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectRepoBranchRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectRepoBranchRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateProjectRepoBranchRequest) GetRepoId() string {
	if x != nil {
		return x.RepoId
	}
	return ""
}

func (x *UpdateProjectRepoBranchRequest) GetReferenceBranch() string {
	if x != nil {
		return x.ReferenceBranch
	}
	return ""
}

func (x *UpdateProjectRepoBranchRequest) GetForceSync() bool {
	if x != nil {
		return x.ForceSync
	}
	return false
}

type UpdateProjectRepoBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateProjectRepoBranchResponse) Reset() {
	*x = UpdateProjectRepoBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectRepoBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectRepoBranchResponse) ProtoMessage() {}

func (x *UpdateProjectRepoBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectRepoBranchResponse.ProtoReflect.Descriptor instead.
func (*UpdateProjectRepoBranchResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{30}
}

type ListProjectReposRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Org     string `protobuf:"bytes,2,opt,name=org,proto3" json:"org,omitempty"`
}

func (x *ListProjectReposRequest) Reset() {
	*x = ListProjectReposRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectReposRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectReposRequest) ProtoMessage() {}

func (x *ListProjectReposRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectReposRequest.ProtoReflect.Descriptor instead.
func (*ListProjectReposRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{31}
}

func (x *ListProjectReposRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ListProjectReposRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

type ListProjectReposResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repos []*ProjectRepo `protobuf:"bytes,1,rep,name=repos,proto3" json:"repos,omitempty"`
}

func (x *ListProjectReposResponse) Reset() {
	*x = ListProjectReposResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProjectReposResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectReposResponse) ProtoMessage() {}

func (x *ListProjectReposResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectReposResponse.ProtoReflect.Descriptor instead.
func (*ListProjectReposResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{32}
}

func (x *ListProjectReposResponse) GetRepos() []*ProjectRepo {
	if x != nil {
		return x.Repos
	}
	return nil
}

type PipelineTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     TriggerType `protobuf:"varint,1,opt,name=type,proto3,enum=api.public.pipelines.TriggerType" json:"type,omitempty"`
	Modifier string      `protobuf:"bytes,2,opt,name=modifier,proto3" json:"modifier,omitempty"`
}

func (x *PipelineTrigger) Reset() {
	*x = PipelineTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTrigger) ProtoMessage() {}

func (x *PipelineTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTrigger.ProtoReflect.Descriptor instead.
func (*PipelineTrigger) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{33}
}

func (x *PipelineTrigger) GetType() TriggerType {
	if x != nil {
		return x.Type
	}
	return TriggerType_TRIGGER_TYPE_UNSPECIFIED
}

func (x *PipelineTrigger) GetModifier() string {
	if x != nil {
		return x.Modifier
	}
	return ""
}

type PipelineArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DefaultValue string `protobuf:"bytes,2,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (x *PipelineArg) Reset() {
	*x = PipelineArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineArg) ProtoMessage() {}

func (x *PipelineArg) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineArg.ProtoReflect.Descriptor instead.
func (*PipelineArg) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{34}
}

func (x *PipelineArg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineArg) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

type RemotePipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo      string             `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Path      string             `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Name      string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Org       string             `protobuf:"bytes,4,opt,name=org,proto3" json:"org,omitempty"`
	Triggers  []*PipelineTrigger `protobuf:"bytes,5,rep,name=triggers,proto3" json:"triggers,omitempty"`
	Args      []*PipelineArg     `protobuf:"bytes,6,rep,name=args,proto3" json:"args,omitempty"`
	StartLine int32              `protobuf:"varint,7,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLine   int32              `protobuf:"varint,8,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	IsPush    bool               `protobuf:"varint,9,opt,name=is_push,json=isPush,proto3" json:"is_push,omitempty"`
}

func (x *RemotePipeline) Reset() {
	*x = RemotePipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemotePipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemotePipeline) ProtoMessage() {}

func (x *RemotePipeline) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemotePipeline.ProtoReflect.Descriptor instead.
func (*RemotePipeline) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{35}
}

func (x *RemotePipeline) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *RemotePipeline) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RemotePipeline) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemotePipeline) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *RemotePipeline) GetTriggers() []*PipelineTrigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *RemotePipeline) GetArgs() []*PipelineArg {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *RemotePipeline) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *RemotePipeline) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *RemotePipeline) GetIsPush() bool {
	if x != nil {
		return x.IsPush
	}
	return false
}

type Pipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo     string             `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Path     string             `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Name     string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Org      string             `protobuf:"bytes,4,opt,name=org,proto3" json:"org,omitempty"`
	Triggers []*PipelineTrigger `protobuf:"bytes,5,rep,name=triggers,proto3" json:"triggers,omitempty"`
	Args     []*PipelineArg     `protobuf:"bytes,6,rep,name=args,proto3" json:"args,omitempty"`
	RepoId   string             `protobuf:"bytes,8,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	Project  string             `protobuf:"bytes,9,opt,name=project,proto3" json:"project,omitempty"`
	IsPush   bool               `protobuf:"varint,10,opt,name=is_push,json=isPush,proto3" json:"is_push,omitempty"`
	Id       string             `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	PathHash string             `protobuf:"bytes,12,opt,name=path_hash,json=pathHash,proto3" json:"path_hash,omitempty"`
	// The name of the provider organization (for example, the GH org name)
	ProviderOrg   string            `protobuf:"bytes,13,opt,name=provider_org,json=providerOrg,proto3" json:"provider_org,omitempty"`
	SatelliteName string            `protobuf:"bytes,14,opt,name=satellite_name,json=satelliteName,proto3" json:"satellite_name,omitempty"`
	Status        PipelineStatus    `protobuf:"varint,15,opt,name=status,proto3,enum=api.public.pipelines.PipelineStatus" json:"status,omitempty"`
	ErrorCode     PipelineErrorCode `protobuf:"varint,16,opt,name=error_code,json=errorCode,proto3,enum=api.public.pipelines.PipelineErrorCode" json:"error_code,omitempty"`
	ErrorDetails  string            `protobuf:"bytes,17,opt,name=error_details,json=errorDetails,proto3" json:"error_details,omitempty"`
}

func (x *Pipeline) Reset() {
	*x = Pipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipeline) ProtoMessage() {}

func (x *Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipeline.ProtoReflect.Descriptor instead.
func (*Pipeline) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{36}
}

func (x *Pipeline) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *Pipeline) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Pipeline) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pipeline) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *Pipeline) GetTriggers() []*PipelineTrigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *Pipeline) GetArgs() []*PipelineArg {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Pipeline) GetRepoId() string {
	if x != nil {
		return x.RepoId
	}
	return ""
}

func (x *Pipeline) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *Pipeline) GetIsPush() bool {
	if x != nil {
		return x.IsPush
	}
	return false
}

func (x *Pipeline) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Pipeline) GetPathHash() string {
	if x != nil {
		return x.PathHash
	}
	return ""
}

func (x *Pipeline) GetProviderOrg() string {
	if x != nil {
		return x.ProviderOrg
	}
	return ""
}

func (x *Pipeline) GetSatelliteName() string {
	if x != nil {
		return x.SatelliteName
	}
	return ""
}

func (x *Pipeline) GetStatus() PipelineStatus {
	if x != nil {
		return x.Status
	}
	return PipelineStatus_STATUS_UNKNOWN
}

func (x *Pipeline) GetErrorCode() PipelineErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return PipelineErrorCode_ERROR_UNKNOWN
}

func (x *Pipeline) GetErrorDetails() string {
	if x != nil {
		return x.ErrorDetails
	}
	return ""
}

type EarthfileParsingError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path  string           `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Error string           `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Code  ParsingErrorCode `protobuf:"varint,3,opt,name=code,proto3,enum=api.public.pipelines.ParsingErrorCode" json:"code,omitempty"`
}

func (x *EarthfileParsingError) Reset() {
	*x = EarthfileParsingError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EarthfileParsingError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarthfileParsingError) ProtoMessage() {}

func (x *EarthfileParsingError) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarthfileParsingError.ProtoReflect.Descriptor instead.
func (*EarthfileParsingError) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{37}
}

func (x *EarthfileParsingError) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *EarthfileParsingError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *EarthfileParsingError) GetCode() ParsingErrorCode {
	if x != nil {
		return x.Code
	}
	return ParsingErrorCode_PARSING_ERROR_UNKNOWN
}

type ListRemotePipelinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo     string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Org      string `protobuf:"bytes,2,opt,name=org,proto3" json:"org,omitempty"`
	Provider string `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	// reference_branch is the branch to use when obtaining the RemotePipelines
	ReferenceBranch string `protobuf:"bytes,4,opt,name=reference_branch,json=referenceBranch,proto3" json:"reference_branch,omitempty"`
}

func (x *ListRemotePipelinesRequest) Reset() {
	*x = ListRemotePipelinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRemotePipelinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRemotePipelinesRequest) ProtoMessage() {}

func (x *ListRemotePipelinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRemotePipelinesRequest.ProtoReflect.Descriptor instead.
func (*ListRemotePipelinesRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{38}
}

func (x *ListRemotePipelinesRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *ListRemotePipelinesRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *ListRemotePipelinesRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListRemotePipelinesRequest) GetReferenceBranch() string {
	if x != nil {
		return x.ReferenceBranch
	}
	return ""
}

type ListRemotePipelinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipelines     []*RemotePipeline        `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	ParsingErrors []*EarthfileParsingError `protobuf:"bytes,2,rep,name=parsing_errors,json=parsingErrors,proto3" json:"parsing_errors,omitempty"`
}

func (x *ListRemotePipelinesResponse) Reset() {
	*x = ListRemotePipelinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRemotePipelinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRemotePipelinesResponse) ProtoMessage() {}

func (x *ListRemotePipelinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRemotePipelinesResponse.ProtoReflect.Descriptor instead.
func (*ListRemotePipelinesResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{39}
}

func (x *ListRemotePipelinesResponse) GetPipelines() []*RemotePipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *ListRemotePipelinesResponse) GetParsingErrors() []*EarthfileParsingError {
	if x != nil {
		return x.ParsingErrors
	}
	return nil
}

type ListRemoteOrgsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRemoteOrgsRequest) Reset() {
	*x = ListRemoteOrgsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRemoteOrgsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRemoteOrgsRequest) ProtoMessage() {}

func (x *ListRemoteOrgsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRemoteOrgsRequest.ProtoReflect.Descriptor instead.
func (*ListRemoteOrgsRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{40}
}

type RemoteOrg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Membership   string `protobuf:"bytes,2,opt,name=membership,proto3" json:"membership,omitempty"`
	Provider     string `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	AppInstalled bool   `protobuf:"varint,4,opt,name=app_installed,json=appInstalled,proto3" json:"app_installed,omitempty"`
}

func (x *RemoteOrg) Reset() {
	*x = RemoteOrg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteOrg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteOrg) ProtoMessage() {}

func (x *RemoteOrg) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteOrg.ProtoReflect.Descriptor instead.
func (*RemoteOrg) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{41}
}

func (x *RemoteOrg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RemoteOrg) GetMembership() string {
	if x != nil {
		return x.Membership
	}
	return ""
}

func (x *RemoteOrg) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *RemoteOrg) GetAppInstalled() bool {
	if x != nil {
		return x.AppInstalled
	}
	return false
}

type ListRemoteOrgsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteOrgs []*RemoteOrg `protobuf:"bytes,1,rep,name=remote_orgs,json=remoteOrgs,proto3" json:"remote_orgs,omitempty"`
}

func (x *ListRemoteOrgsResponse) Reset() {
	*x = ListRemoteOrgsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRemoteOrgsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRemoteOrgsResponse) ProtoMessage() {}

func (x *ListRemoteOrgsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRemoteOrgsResponse.ProtoReflect.Descriptor instead.
func (*ListRemoteOrgsResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{42}
}

func (x *ListRemoteOrgsResponse) GetRemoteOrgs() []*RemoteOrg {
	if x != nil {
		return x.RemoteOrgs
	}
	return nil
}

type GetPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineId string `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
}

func (x *GetPipelineRequest) Reset() {
	*x = GetPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPipelineRequest) ProtoMessage() {}

func (x *GetPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPipelineRequest.ProtoReflect.Descriptor instead.
func (*GetPipelineRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{43}
}

func (x *GetPipelineRequest) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

type GetPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *GetPipelineResponse) Reset() {
	*x = GetPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPipelineResponse) ProtoMessage() {}

func (x *GetPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPipelineResponse.ProtoReflect.Descriptor instead.
func (*GetPipelineResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{44}
}

func (x *GetPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

type ListPipelinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project       string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"` // project Name
	Org           string `protobuf:"bytes,2,opt,name=org,proto3" json:"org,omitempty"`         // Org Name
	EarthfileHash string `protobuf:"bytes,3,opt,name=earthfile_hash,json=earthfileHash,proto3" json:"earthfile_hash,omitempty"`
	ProjectId     string `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	OrgId         string `protobuf:"bytes,5,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *ListPipelinesRequest) Reset() {
	*x = ListPipelinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelinesRequest) ProtoMessage() {}

func (x *ListPipelinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelinesRequest.ProtoReflect.Descriptor instead.
func (*ListPipelinesRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{45}
}

func (x *ListPipelinesRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ListPipelinesRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *ListPipelinesRequest) GetEarthfileHash() string {
	if x != nil {
		return x.EarthfileHash
	}
	return ""
}

func (x *ListPipelinesRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListPipelinesRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

type ListPipelinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipelines []*Pipeline `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
}

func (x *ListPipelinesResponse) Reset() {
	*x = ListPipelinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelinesResponse) ProtoMessage() {}

func (x *ListPipelinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelinesResponse.ProtoReflect.Descriptor instead.
func (*ListPipelinesResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{46}
}

func (x *ListPipelinesResponse) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

type AddPipelinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipelines []*Pipeline `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
}

func (x *AddPipelinesRequest) Reset() {
	*x = AddPipelinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPipelinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPipelinesRequest) ProtoMessage() {}

func (x *AddPipelinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPipelinesRequest.ProtoReflect.Descriptor instead.
func (*AddPipelinesRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{47}
}

func (x *AddPipelinesRequest) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

type AddPipelinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pipelines []*Pipeline `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
}

func (x *AddPipelinesResponse) Reset() {
	*x = AddPipelinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddPipelinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddPipelinesResponse) ProtoMessage() {}

func (x *AddPipelinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddPipelinesResponse.ProtoReflect.Descriptor instead.
func (*AddPipelinesResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{48}
}

func (x *AddPipelinesResponse) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

type RemovePipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineId string `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
}

func (x *RemovePipelineRequest) Reset() {
	*x = RemovePipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePipelineRequest) ProtoMessage() {}

func (x *RemovePipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePipelineRequest.ProtoReflect.Descriptor instead.
func (*RemovePipelineRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{49}
}

func (x *RemovePipelineRequest) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

type RemovePipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemovePipelineResponse) Reset() {
	*x = RemovePipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePipelineResponse) ProtoMessage() {}

func (x *RemovePipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePipelineResponse.ProtoReflect.Descriptor instead.
func (*RemovePipelineResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{50}
}

type PipelineRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PipelineId      string                 `protobuf:"bytes,2,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	Status          RunStatus              `protobuf:"varint,3,opt,name=status,proto3,enum=api.public.pipelines.RunStatus" json:"status,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	StartedAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	TriggerType     TriggerType            `protobuf:"varint,7,opt,name=trigger_type,json=triggerType,proto3,enum=api.public.pipelines.TriggerType" json:"trigger_type,omitempty"`
	TriggerModifier string                 `protobuf:"bytes,8,opt,name=trigger_modifier,json=triggerModifier,proto3" json:"trigger_modifier,omitempty"`
	PrNum           int32                  `protobuf:"varint,9,opt,name=pr_num,json=prNum,proto3" json:"pr_num,omitempty"`
	CommitHash      string                 `protobuf:"bytes,10,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	SeqNum          int32                  `protobuf:"varint,11,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	CommitEmail     string                 `protobuf:"bytes,12,opt,name=commit_email,json=commitEmail,proto3" json:"commit_email,omitempty"`
	CommitLogin     string                 `protobuf:"bytes,13,opt,name=commit_login,json=commitLogin,proto3" json:"commit_login,omitempty"`
	OrgSeqNum       int32                  `protobuf:"varint,14,opt,name=org_seq_num,json=orgSeqNum,proto3" json:"org_seq_num,omitempty"`
	// head_branch is the branch that contains the proposed changes
	HeadBranch string `protobuf:"bytes,15,opt,name=head_branch,json=headBranch,proto3" json:"head_branch,omitempty"`
	// base_branch is the branch the changes from head_branch will be merged into (may be the same branch)
	BaseBranch string `protobuf:"bytes,16,opt,name=base_branch,json=baseBranch,proto3" json:"base_branch,omitempty"`
}

func (x *PipelineRun) Reset() {
	*x = PipelineRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRun) ProtoMessage() {}

func (x *PipelineRun) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRun.ProtoReflect.Descriptor instead.
func (*PipelineRun) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{51}
}

func (x *PipelineRun) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PipelineRun) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *PipelineRun) GetStatus() RunStatus {
	if x != nil {
		return x.Status
	}
	return RunStatus_RUN_STATUS_UNSPECIFIED
}

func (x *PipelineRun) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PipelineRun) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *PipelineRun) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *PipelineRun) GetTriggerType() TriggerType {
	if x != nil {
		return x.TriggerType
	}
	return TriggerType_TRIGGER_TYPE_UNSPECIFIED
}

func (x *PipelineRun) GetTriggerModifier() string {
	if x != nil {
		return x.TriggerModifier
	}
	return ""
}

func (x *PipelineRun) GetPrNum() int32 {
	if x != nil {
		return x.PrNum
	}
	return 0
}

func (x *PipelineRun) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

func (x *PipelineRun) GetSeqNum() int32 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

func (x *PipelineRun) GetCommitEmail() string {
	if x != nil {
		return x.CommitEmail
	}
	return ""
}

func (x *PipelineRun) GetCommitLogin() string {
	if x != nil {
		return x.CommitLogin
	}
	return ""
}

func (x *PipelineRun) GetOrgSeqNum() int32 {
	if x != nil {
		return x.OrgSeqNum
	}
	return 0
}

func (x *PipelineRun) GetHeadBranch() string {
	if x != nil {
		return x.HeadBranch
	}
	return ""
}

func (x *PipelineRun) GetBaseBranch() string {
	if x != nil {
		return x.BaseBranch
	}
	return ""
}

type CommitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash      string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	AvatarUrl string `protobuf:"bytes,2,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Message   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CommitInfo) Reset() {
	*x = CommitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitInfo) ProtoMessage() {}

func (x *CommitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitInfo.ProtoReflect.Descriptor instead.
func (*CommitInfo) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{52}
}

func (x *CommitInfo) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *CommitInfo) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *CommitInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListRunsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipelineId string `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	Org        string `protobuf:"bytes,2,opt,name=org,proto3" json:"org,omitempty"`
	Project    string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	Limit      int32  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListRunsRequest) Reset() {
	*x = ListRunsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunsRequest) ProtoMessage() {}

func (x *ListRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunsRequest.ProtoReflect.Descriptor instead.
func (*ListRunsRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{53}
}

func (x *ListRunsRequest) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *ListRunsRequest) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *ListRunsRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ListRunsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListRunsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runs       []*PipelineRun `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
	CommitInfo []*CommitInfo  `protobuf:"bytes,2,rep,name=commit_info,json=commitInfo,proto3" json:"commit_info,omitempty"`
}

func (x *ListRunsResponse) Reset() {
	*x = ListRunsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRunsResponse) ProtoMessage() {}

func (x *ListRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRunsResponse.ProtoReflect.Descriptor instead.
func (*ListRunsResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{54}
}

func (x *ListRunsResponse) GetRuns() []*PipelineRun {
	if x != nil {
		return x.Runs
	}
	return nil
}

func (x *ListRunsResponse) GetCommitInfo() []*CommitInfo {
	if x != nil {
		return x.CommitInfo
	}
	return nil
}

type GetRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId      string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	PipelineId string `protobuf:"bytes,2,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	SeqNum     int32  `protobuf:"varint,3,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	OrgName    string `protobuf:"bytes,4,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	OrgSeqNum  int32  `protobuf:"varint,5,opt,name=org_seq_num,json=orgSeqNum,proto3" json:"org_seq_num,omitempty"`
}

func (x *GetRunRequest) Reset() {
	*x = GetRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunRequest) ProtoMessage() {}

func (x *GetRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunRequest.ProtoReflect.Descriptor instead.
func (*GetRunRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{55}
}

func (x *GetRunRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GetRunRequest) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *GetRunRequest) GetSeqNum() int32 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

func (x *GetRunRequest) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *GetRunRequest) GetOrgSeqNum() int32 {
	if x != nil {
		return x.OrgSeqNum
	}
	return 0
}

type GetRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Run        *PipelineRun `protobuf:"bytes,1,opt,name=run,proto3" json:"run,omitempty"`
	CommitInfo *CommitInfo  `protobuf:"bytes,2,opt,name=commit_info,json=commitInfo,proto3" json:"commit_info,omitempty"`
}

func (x *GetRunResponse) Reset() {
	*x = GetRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRunResponse) ProtoMessage() {}

func (x *GetRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRunResponse.ProtoReflect.Descriptor instead.
func (*GetRunResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{56}
}

func (x *GetRunResponse) GetRun() *PipelineRun {
	if x != nil {
		return x.Run
	}
	return nil
}

func (x *GetRunResponse) GetCommitInfo() *CommitInfo {
	if x != nil {
		return x.CommitInfo
	}
	return nil
}

type CancelRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *CancelRunRequest) Reset() {
	*x = CancelRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRunRequest) ProtoMessage() {}

func (x *CancelRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRunRequest.ProtoReflect.Descriptor instead.
func (*CancelRunRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{57}
}

func (x *CancelRunRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type CancelRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelRunResponse) Reset() {
	*x = CancelRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelRunResponse) ProtoMessage() {}

func (x *CancelRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelRunResponse.ProtoReflect.Descriptor instead.
func (*CancelRunResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{58}
}

type RerunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An existing run ID that can be used as a basis for the new run.
	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *RerunRequest) Reset() {
	*x = RerunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerunRequest) ProtoMessage() {}

func (x *RerunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerunRequest.ProtoReflect.Descriptor instead.
func (*RerunRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{59}
}

func (x *RerunRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type RerunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Run        *PipelineRun `protobuf:"bytes,1,opt,name=run,proto3" json:"run,omitempty"`
	CommitInfo *CommitInfo  `protobuf:"bytes,2,opt,name=commit_info,json=commitInfo,proto3" json:"commit_info,omitempty"`
}

func (x *RerunResponse) Reset() {
	*x = RerunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerunResponse) ProtoMessage() {}

func (x *RerunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerunResponse.ProtoReflect.Descriptor instead.
func (*RerunResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{60}
}

func (x *RerunResponse) GetRun() *PipelineRun {
	if x != nil {
		return x.Run
	}
	return nil
}

func (x *RerunResponse) GetCommitInfo() *CommitInfo {
	if x != nil {
		return x.CommitInfo
	}
	return nil
}

type ListSyncStatusesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId       string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ProjectId   string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	OrgName     string `protobuf:"bytes,3,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	ProjectName string `protobuf:"bytes,4,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
}

func (x *ListSyncStatusesRequest) Reset() {
	*x = ListSyncStatusesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSyncStatusesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSyncStatusesRequest) ProtoMessage() {}

func (x *ListSyncStatusesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSyncStatusesRequest.ProtoReflect.Descriptor instead.
func (*ListSyncStatusesRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{61}
}

func (x *ListSyncStatusesRequest) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ListSyncStatusesRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListSyncStatusesRequest) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *ListSyncStatusesRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

type SyncStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId     string         `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ProjectId string         `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Status    SyncStatusType `protobuf:"varint,3,opt,name=status,proto3,enum=api.public.pipelines.SyncStatusType" json:"status,omitempty"`
	ErrorCode SyncErrorCode  `protobuf:"varint,4,opt,name=error_code,json=errorCode,proto3,enum=api.public.pipelines.SyncErrorCode" json:"error_code,omitempty"`
	Details   string         `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *SyncStatus) Reset() {
	*x = SyncStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStatus) ProtoMessage() {}

func (x *SyncStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStatus.ProtoReflect.Descriptor instead.
func (*SyncStatus) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{62}
}

func (x *SyncStatus) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SyncStatus) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *SyncStatus) GetStatus() SyncStatusType {
	if x != nil {
		return x.Status
	}
	return SyncStatusType_SYNC_STATUS_UNKNOWN
}

func (x *SyncStatus) GetErrorCode() SyncErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return SyncErrorCode_SYNC_ERROR_UNKNOWN
}

func (x *SyncStatus) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type ListSyncStatusesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statuses []*SyncStatus `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
}

func (x *ListSyncStatusesResponse) Reset() {
	*x = ListSyncStatusesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSyncStatusesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSyncStatusesResponse) ProtoMessage() {}

func (x *ListSyncStatusesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSyncStatusesResponse.ProtoReflect.Descriptor instead.
func (*ListSyncStatusesResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{63}
}

func (x *ListSyncStatusesResponse) GetStatuses() []*SyncStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type TriggerRunEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId      string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Status     RunStatus              `protobuf:"varint,2,opt,name=status,proto3,enum=api.public.pipelines.RunStatus" json:"status,omitempty"`
	HappenedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=happened_at,json=happenedAt,proto3" json:"happened_at,omitempty"`
}

func (x *TriggerRunEventRequest) Reset() {
	*x = TriggerRunEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerRunEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerRunEventRequest) ProtoMessage() {}

func (x *TriggerRunEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerRunEventRequest.ProtoReflect.Descriptor instead.
func (*TriggerRunEventRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{64}
}

func (x *TriggerRunEventRequest) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *TriggerRunEventRequest) GetStatus() RunStatus {
	if x != nil {
		return x.Status
	}
	return RunStatus_RUN_STATUS_UNSPECIFIED
}

func (x *TriggerRunEventRequest) GetHappenedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.HappenedAt
	}
	return nil
}

type TriggerRunEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TriggerRunEventResponse) Reset() {
	*x = TriggerRunEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerRunEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerRunEventResponse) ProtoMessage() {}

func (x *TriggerRunEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerRunEventResponse.ProtoReflect.Descriptor instead.
func (*TriggerRunEventResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{65}
}

type ListAccountEmailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAccountEmailsRequest) Reset() {
	*x = ListAccountEmailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountEmailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountEmailsRequest) ProtoMessage() {}

func (x *ListAccountEmailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountEmailsRequest.ProtoReflect.Descriptor instead.
func (*ListAccountEmailsRequest) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{66}
}

type ListAccountEmailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Emails       []string `protobuf:"bytes,1,rep,name=emails,proto3" json:"emails,omitempty"`
	PrimaryEmail string   `protobuf:"bytes,2,opt,name=primary_email,json=primaryEmail,proto3" json:"primary_email,omitempty"`
}

func (x *ListAccountEmailsResponse) Reset() {
	*x = ListAccountEmailsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAccountEmailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountEmailsResponse) ProtoMessage() {}

func (x *ListAccountEmailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountEmailsResponse.ProtoReflect.Descriptor instead.
func (*ListAccountEmailsResponse) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{67}
}

func (x *ListAccountEmailsResponse) GetEmails() []string {
	if x != nil {
		return x.Emails
	}
	return nil
}

func (x *ListAccountEmailsResponse) GetPrimaryEmail() string {
	if x != nil {
		return x.PrimaryEmail
	}
	return ""
}

type ListSatellitesResponse_SatelliteInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string          `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name     string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Platform string          `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	Status   SatelliteStatus `protobuf:"varint,4,opt,name=status,proto3,enum=api.public.pipelines.SatelliteStatus" json:"status,omitempty"`
	Version  string          `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"` // deprecated
}

func (x *ListSatellitesResponse_SatelliteInstance) Reset() {
	*x = ListSatellitesResponse_SatelliteInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipelines_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSatellitesResponse_SatelliteInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSatellitesResponse_SatelliteInstance) ProtoMessage() {}

func (x *ListSatellitesResponse_SatelliteInstance) ProtoReflect() protoreflect.Message {
	mi := &file_pipelines_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSatellitesResponse_SatelliteInstance.ProtoReflect.Descriptor instead.
func (*ListSatellitesResponse_SatelliteInstance) Descriptor() ([]byte, []int) {
	return file_pipelines_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ListSatellitesResponse_SatelliteInstance) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListSatellitesResponse_SatelliteInstance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListSatellitesResponse_SatelliteInstance) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ListSatellitesResponse_SatelliteInstance) GetStatus() SatelliteStatus {
	if x != nil {
		return x.Status
	}
	return SatelliteStatus_SATELLITE_STATUS_UNKNOWN
}

func (x *ListSatellitesResponse_SatelliteInstance) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

var File_pipelines_proto protoreflect.FileDescriptor

var file_pipelines_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x18, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x22, 0xa3, 0x01,
	0x0a, 0x12, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x22, 0x30, 0x0a, 0x13, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x67, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x22, 0x35, 0x0a, 0x09, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x16, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x72, 0x0a, 0x17, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0xae, 0x02,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0xb5, 0x01, 0x0a, 0x11, 0x53, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x43,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xf4, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x3d,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x44, 0x6e, 0x73, 0x22, 0x41, 0x0a, 0x14, 0x57, 0x61, 0x6b, 0x65, 0x53,
	0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x15, 0x57, 0x61,
	0x6b, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64,
	0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x57, 0x61, 0x6b, 0x65, 0x55, 0x70, 0x22,
	0x44, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x2a, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x22, 0x87, 0x01, 0x0a,
	0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x51, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x72, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6f,
	0x72, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4f, 0x72, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x22, 0x78, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x05, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x79, 0x6e,
	0x63, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x52, 0x0a, 0x17, 0x41, 0x64,
	0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x22, 0x2a,
	0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65,
	0x70, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x22, 0x21, 0x0a,
	0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x45, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x22, 0x53, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x22, 0x64, 0x0a, 0x0f,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x22, 0x46, 0x0a, 0x0b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x72,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x0e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x41, 0x0a, 0x08, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x35,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x50, 0x75, 0x73, 0x68, 0x22, 0xc6, 0x04, 0x0a, 0x08, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6f, 0x72, 0x67, 0x12, 0x41, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x67, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x50, 0x75, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x74, 0x68, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46,
	0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4a, 0x04, 0x08, 0x07, 0x10,
	0x08, 0x22, 0x7d, 0x0a, 0x15, 0x45, 0x61, 0x72, 0x74, 0x68, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e,
	0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x89, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x65, 0x70, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0xb5, 0x01, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x12, 0x52, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e,
	0x45, 0x61, 0x72, 0x74, 0x68, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x80, 0x01,
	0x0a, 0x09, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x22, 0x5a, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x72,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x73, 0x22, 0x35, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x61, 0x72, 0x74, 0x68, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x61, 0x72, 0x74, 0x68, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22,
	0x53, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x15, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e,
	0x05, 0x0a, 0x0b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x35,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a,
	0x0b, 0x6f, 0x72, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22,
	0x59, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x74, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x8c, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x9b, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x71,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e,
	0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0b, 0x6f, 0x72, 0x67, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x22, 0x88, 0x01,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e,
	0x52, 0x03, 0x72, 0x75, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x29, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75,
	0x6e, 0x49, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x0a, 0x0c, 0x52, 0x65, 0x72, 0x75,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x22,
	0x87, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x75,
	0x6e, 0x52, 0x03, 0x72, 0x75, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x0a, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x58, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x16, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x52, 0x75,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3b, 0x0a, 0x0b, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x22, 0x19, 0x0a, 0x17,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x2a, 0xa6, 0x02,
	0x0a, 0x0f, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x1f,
	0x0a, 0x1b, 0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12,
	0x1b, 0x0a, 0x17, 0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x41, 0x54, 0x45,
	0x4c, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x41, 0x54, 0x45, 0x4c,
	0x4c, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x50, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x2a, 0x70, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x53,
	0x48, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x10, 0x03, 0x2a, 0x45, 0x0a, 0x0e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x2a,
	0x6f, 0x0a, 0x11, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x04,
	0x2a, 0x90, 0x01, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x52, 0x53, 0x49, 0x4e, 0x47,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x52, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x52, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21,
	0x50, 0x41, 0x52, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x10, 0x03, 0x2a, 0x86, 0x01, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x54, 0x0a, 0x0e,
	0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x59, 0x4e, 0x43, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x59, 0x4e, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x02, 0x2a, 0x82, 0x01, 0x0a, 0x0d, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x59, 0x4e, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x50, 0x41, 0x52, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x59, 0x4e,
	0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x32, 0xdd, 0x1d, 0x0a, 0x09, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x41, 0x3a, 0x01, 0x2a, 0x22, 0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x0f, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22,
	0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x74, 0x65, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x61, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x2f, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x12, 0x9b, 0x01,
	0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74,
	0x65, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x2f, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x12,
	0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x73, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12,
	0x88, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65,
	0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12,
	0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x74, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x93, 0x01, 0x0a, 0x0d, 0x57,
	0x61, 0x6b, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2e, 0x57, 0x61, 0x6b, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e,
	0x57, 0x61, 0x6b, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a,
	0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x77, 0x61, 0x6b, 0x65,
	0x12, 0x75, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x8c, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x6f, 0x72, 0x67, 0x73,
	0x12, 0x88, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x11,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x2a, 0x12, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xbb,
	0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x34, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a,
	0x01, 0x2a, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x88, 0x01, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x30, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x83, 0x01,
	0x0a, 0x0c, 0x41, 0x64, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x29,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a,
	0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x12, 0x8b, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21,
	0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0x9c, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x12, 0x94, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x2a, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x6f, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x75, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x30, 0x2f, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x68, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x52,
	0x75, 0x6e, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x72,
	0x75, 0x6e, 0x12, 0x6e, 0x0a, 0x05, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x12, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22,
	0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x72, 0x75, 0x6e, 0x2f, 0x63, 0x6c, 0x6f,
	0x6e, 0x65, 0x12, 0x7b, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x75, 0x6e, 0x12,
	0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x30, 0x2f, 0x72, 0x75, 0x6e, 0x2f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12,
	0x8b, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12,
	0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x2f,
	0x6f, 0x72, 0x67, 0x2f, 0x7b, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x8e, 0x01,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x30, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x70,
	0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x94, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12,
	0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x30, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pipelines_proto_rawDescOnce sync.Once
	file_pipelines_proto_rawDescData = file_pipelines_proto_rawDesc
)

func file_pipelines_proto_rawDescGZIP() []byte {
	file_pipelines_proto_rawDescOnce.Do(func() {
		file_pipelines_proto_rawDescData = protoimpl.X.CompressGZIP(file_pipelines_proto_rawDescData)
	})
	return file_pipelines_proto_rawDescData
}

var file_pipelines_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_pipelines_proto_msgTypes = make([]protoimpl.MessageInfo, 69)
var file_pipelines_proto_goTypes = []interface{}{
	(SatelliteStatus)(0),                             // 0: api.public.pipelines.SatelliteStatus
	(TriggerType)(0),                                 // 1: api.public.pipelines.TriggerType
	(PipelineStatus)(0),                              // 2: api.public.pipelines.PipelineStatus
	(PipelineErrorCode)(0),                           // 3: api.public.pipelines.PipelineErrorCode
	(ParsingErrorCode)(0),                            // 4: api.public.pipelines.ParsingErrorCode
	(RunStatus)(0),                                   // 5: api.public.pipelines.RunStatus
	(SyncStatusType)(0),                              // 6: api.public.pipelines.SyncStatusType
	(SyncErrorCode)(0),                               // 7: api.public.pipelines.SyncErrorCode
	(*GetOrgLimitsRequest)(nil),                      // 8: api.public.pipelines.GetOrgLimitsRequest
	(*GetOrgLimitsResponse)(nil),                     // 9: api.public.pipelines.GetOrgLimitsResponse
	(*ManualBuildRequest)(nil),                       // 10: api.public.pipelines.ManualBuildRequest
	(*ManualBuildResponse)(nil),                      // 11: api.public.pipelines.ManualBuildResponse
	(*Target)(nil),                                   // 12: api.public.pipelines.Target
	(*TargetArg)(nil),                                // 13: api.public.pipelines.TargetArg
	(*TargetSecret)(nil),                             // 14: api.public.pipelines.TargetSecret
	(*LaunchSatelliteRequest)(nil),                   // 15: api.public.pipelines.LaunchSatelliteRequest
	(*LaunchSatelliteResponse)(nil),                  // 16: api.public.pipelines.LaunchSatelliteResponse
	(*ListSatellitesRequest)(nil),                    // 17: api.public.pipelines.ListSatellitesRequest
	(*ListSatellitesResponse)(nil),                   // 18: api.public.pipelines.ListSatellitesResponse
	(*UpdateSatelliteRequest)(nil),                   // 19: api.public.pipelines.UpdateSatelliteRequest
	(*UpdateSatelliteResponse)(nil),                  // 20: api.public.pipelines.UpdateSatelliteResponse
	(*DeleteSatelliteRequest)(nil),                   // 21: api.public.pipelines.DeleteSatelliteRequest
	(*DeleteSatelliteResponse)(nil),                  // 22: api.public.pipelines.DeleteSatelliteResponse
	(*GetSatelliteRequest)(nil),                      // 23: api.public.pipelines.GetSatelliteRequest
	(*GetSatelliteResponse)(nil),                     // 24: api.public.pipelines.GetSatelliteResponse
	(*WakeSatelliteRequest)(nil),                     // 25: api.public.pipelines.WakeSatelliteRequest
	(*WakeSatelliteResponse)(nil),                    // 26: api.public.pipelines.WakeSatelliteResponse
	(*ReserveSatelliteRequest)(nil),                  // 27: api.public.pipelines.ReserveSatelliteRequest
	(*ReserveSatelliteResponse)(nil),                 // 28: api.public.pipelines.ReserveSatelliteResponse
	(*ListRemoteReposRequest)(nil),                   // 29: api.public.pipelines.ListRemoteReposRequest
	(*RemoteRepo)(nil),                               // 30: api.public.pipelines.RemoteRepo
	(*ListRemoteReposResponse)(nil),                  // 31: api.public.pipelines.ListRemoteReposResponse
	(*ProjectRepo)(nil),                              // 32: api.public.pipelines.ProjectRepo
	(*AddProjectReposRequest)(nil),                   // 33: api.public.pipelines.AddProjectReposRequest
	(*AddProjectReposResponse)(nil),                  // 34: api.public.pipelines.AddProjectReposResponse
	(*RemoveProjectRepoRequest)(nil),                 // 35: api.public.pipelines.RemoveProjectRepoRequest
	(*RemoveProjectRepoResponse)(nil),                // 36: api.public.pipelines.RemoveProjectRepoResponse
	(*UpdateProjectRepoBranchRequest)(nil),           // 37: api.public.pipelines.UpdateProjectRepoBranchRequest
	(*UpdateProjectRepoBranchResponse)(nil),          // 38: api.public.pipelines.UpdateProjectRepoBranchResponse
	(*ListProjectReposRequest)(nil),                  // 39: api.public.pipelines.ListProjectReposRequest
	(*ListProjectReposResponse)(nil),                 // 40: api.public.pipelines.ListProjectReposResponse
	(*PipelineTrigger)(nil),                          // 41: api.public.pipelines.PipelineTrigger
	(*PipelineArg)(nil),                              // 42: api.public.pipelines.PipelineArg
	(*RemotePipeline)(nil),                           // 43: api.public.pipelines.RemotePipeline
	(*Pipeline)(nil),                                 // 44: api.public.pipelines.Pipeline
	(*EarthfileParsingError)(nil),                    // 45: api.public.pipelines.EarthfileParsingError
	(*ListRemotePipelinesRequest)(nil),               // 46: api.public.pipelines.ListRemotePipelinesRequest
	(*ListRemotePipelinesResponse)(nil),              // 47: api.public.pipelines.ListRemotePipelinesResponse
	(*ListRemoteOrgsRequest)(nil),                    // 48: api.public.pipelines.ListRemoteOrgsRequest
	(*RemoteOrg)(nil),                                // 49: api.public.pipelines.RemoteOrg
	(*ListRemoteOrgsResponse)(nil),                   // 50: api.public.pipelines.ListRemoteOrgsResponse
	(*GetPipelineRequest)(nil),                       // 51: api.public.pipelines.GetPipelineRequest
	(*GetPipelineResponse)(nil),                      // 52: api.public.pipelines.GetPipelineResponse
	(*ListPipelinesRequest)(nil),                     // 53: api.public.pipelines.ListPipelinesRequest
	(*ListPipelinesResponse)(nil),                    // 54: api.public.pipelines.ListPipelinesResponse
	(*AddPipelinesRequest)(nil),                      // 55: api.public.pipelines.AddPipelinesRequest
	(*AddPipelinesResponse)(nil),                     // 56: api.public.pipelines.AddPipelinesResponse
	(*RemovePipelineRequest)(nil),                    // 57: api.public.pipelines.RemovePipelineRequest
	(*RemovePipelineResponse)(nil),                   // 58: api.public.pipelines.RemovePipelineResponse
	(*PipelineRun)(nil),                              // 59: api.public.pipelines.PipelineRun
	(*CommitInfo)(nil),                               // 60: api.public.pipelines.CommitInfo
	(*ListRunsRequest)(nil),                          // 61: api.public.pipelines.ListRunsRequest
	(*ListRunsResponse)(nil),                         // 62: api.public.pipelines.ListRunsResponse
	(*GetRunRequest)(nil),                            // 63: api.public.pipelines.GetRunRequest
	(*GetRunResponse)(nil),                           // 64: api.public.pipelines.GetRunResponse
	(*CancelRunRequest)(nil),                         // 65: api.public.pipelines.CancelRunRequest
	(*CancelRunResponse)(nil),                        // 66: api.public.pipelines.CancelRunResponse
	(*RerunRequest)(nil),                             // 67: api.public.pipelines.RerunRequest
	(*RerunResponse)(nil),                            // 68: api.public.pipelines.RerunResponse
	(*ListSyncStatusesRequest)(nil),                  // 69: api.public.pipelines.ListSyncStatusesRequest
	(*SyncStatus)(nil),                               // 70: api.public.pipelines.SyncStatus
	(*ListSyncStatusesResponse)(nil),                 // 71: api.public.pipelines.ListSyncStatusesResponse
	(*TriggerRunEventRequest)(nil),                   // 72: api.public.pipelines.TriggerRunEventRequest
	(*TriggerRunEventResponse)(nil),                  // 73: api.public.pipelines.TriggerRunEventResponse
	(*ListAccountEmailsRequest)(nil),                 // 74: api.public.pipelines.ListAccountEmailsRequest
	(*ListAccountEmailsResponse)(nil),                // 75: api.public.pipelines.ListAccountEmailsResponse
	(*ListSatellitesResponse_SatelliteInstance)(nil), // 76: api.public.pipelines.ListSatellitesResponse.SatelliteInstance
	(*timestamppb.Timestamp)(nil),                    // 77: google.protobuf.Timestamp
}
var file_pipelines_proto_depIdxs = []int32{
	12, // 0: api.public.pipelines.ManualBuildRequest.targets:type_name -> api.public.pipelines.Target
	13, // 1: api.public.pipelines.Target.args:type_name -> api.public.pipelines.TargetArg
	14, // 2: api.public.pipelines.Target.secrets:type_name -> api.public.pipelines.TargetSecret
	0,  // 3: api.public.pipelines.LaunchSatelliteResponse.status:type_name -> api.public.pipelines.SatelliteStatus
	76, // 4: api.public.pipelines.ListSatellitesResponse.instances:type_name -> api.public.pipelines.ListSatellitesResponse.SatelliteInstance
	0,  // 5: api.public.pipelines.GetSatelliteResponse.status:type_name -> api.public.pipelines.SatelliteStatus
	0,  // 6: api.public.pipelines.ReserveSatelliteResponse.status:type_name -> api.public.pipelines.SatelliteStatus
	30, // 7: api.public.pipelines.ListRemoteReposResponse.repos:type_name -> api.public.pipelines.RemoteRepo
	77, // 8: api.public.pipelines.ProjectRepo.created_at:type_name -> google.protobuf.Timestamp
	32, // 9: api.public.pipelines.AddProjectReposRequest.repos:type_name -> api.public.pipelines.ProjectRepo
	32, // 10: api.public.pipelines.AddProjectReposResponse.repos:type_name -> api.public.pipelines.ProjectRepo
	32, // 11: api.public.pipelines.ListProjectReposResponse.repos:type_name -> api.public.pipelines.ProjectRepo
	1,  // 12: api.public.pipelines.PipelineTrigger.type:type_name -> api.public.pipelines.TriggerType
	41, // 13: api.public.pipelines.RemotePipeline.triggers:type_name -> api.public.pipelines.PipelineTrigger
	42, // 14: api.public.pipelines.RemotePipeline.args:type_name -> api.public.pipelines.PipelineArg
	41, // 15: api.public.pipelines.Pipeline.triggers:type_name -> api.public.pipelines.PipelineTrigger
	42, // 16: api.public.pipelines.Pipeline.args:type_name -> api.public.pipelines.PipelineArg
	2,  // 17: api.public.pipelines.Pipeline.status:type_name -> api.public.pipelines.PipelineStatus
	3,  // 18: api.public.pipelines.Pipeline.error_code:type_name -> api.public.pipelines.PipelineErrorCode
	4,  // 19: api.public.pipelines.EarthfileParsingError.code:type_name -> api.public.pipelines.ParsingErrorCode
	43, // 20: api.public.pipelines.ListRemotePipelinesResponse.pipelines:type_name -> api.public.pipelines.RemotePipeline
	45, // 21: api.public.pipelines.ListRemotePipelinesResponse.parsing_errors:type_name -> api.public.pipelines.EarthfileParsingError
	49, // 22: api.public.pipelines.ListRemoteOrgsResponse.remote_orgs:type_name -> api.public.pipelines.RemoteOrg
	44, // 23: api.public.pipelines.GetPipelineResponse.pipeline:type_name -> api.public.pipelines.Pipeline
	44, // 24: api.public.pipelines.ListPipelinesResponse.pipelines:type_name -> api.public.pipelines.Pipeline
	44, // 25: api.public.pipelines.AddPipelinesRequest.pipelines:type_name -> api.public.pipelines.Pipeline
	44, // 26: api.public.pipelines.AddPipelinesResponse.pipelines:type_name -> api.public.pipelines.Pipeline
	5,  // 27: api.public.pipelines.PipelineRun.status:type_name -> api.public.pipelines.RunStatus
	77, // 28: api.public.pipelines.PipelineRun.created_at:type_name -> google.protobuf.Timestamp
	77, // 29: api.public.pipelines.PipelineRun.started_at:type_name -> google.protobuf.Timestamp
	77, // 30: api.public.pipelines.PipelineRun.ended_at:type_name -> google.protobuf.Timestamp
	1,  // 31: api.public.pipelines.PipelineRun.trigger_type:type_name -> api.public.pipelines.TriggerType
	59, // 32: api.public.pipelines.ListRunsResponse.runs:type_name -> api.public.pipelines.PipelineRun
	60, // 33: api.public.pipelines.ListRunsResponse.commit_info:type_name -> api.public.pipelines.CommitInfo
	59, // 34: api.public.pipelines.GetRunResponse.run:type_name -> api.public.pipelines.PipelineRun
	60, // 35: api.public.pipelines.GetRunResponse.commit_info:type_name -> api.public.pipelines.CommitInfo
	59, // 36: api.public.pipelines.RerunResponse.run:type_name -> api.public.pipelines.PipelineRun
	60, // 37: api.public.pipelines.RerunResponse.commit_info:type_name -> api.public.pipelines.CommitInfo
	6,  // 38: api.public.pipelines.SyncStatus.status:type_name -> api.public.pipelines.SyncStatusType
	7,  // 39: api.public.pipelines.SyncStatus.error_code:type_name -> api.public.pipelines.SyncErrorCode
	70, // 40: api.public.pipelines.ListSyncStatusesResponse.statuses:type_name -> api.public.pipelines.SyncStatus
	5,  // 41: api.public.pipelines.TriggerRunEventRequest.status:type_name -> api.public.pipelines.RunStatus
	77, // 42: api.public.pipelines.TriggerRunEventRequest.happened_at:type_name -> google.protobuf.Timestamp
	0,  // 43: api.public.pipelines.ListSatellitesResponse.SatelliteInstance.status:type_name -> api.public.pipelines.SatelliteStatus
	10, // 44: api.public.pipelines.Pipelines.ManualBuild:input_type -> api.public.pipelines.ManualBuildRequest
	15, // 45: api.public.pipelines.Pipelines.LaunchSatellite:input_type -> api.public.pipelines.LaunchSatelliteRequest
	17, // 46: api.public.pipelines.Pipelines.ListSatellites:input_type -> api.public.pipelines.ListSatellitesRequest
	19, // 47: api.public.pipelines.Pipelines.UpdateSatellite:input_type -> api.public.pipelines.UpdateSatelliteRequest
	21, // 48: api.public.pipelines.Pipelines.DeleteSatellite:input_type -> api.public.pipelines.DeleteSatelliteRequest
	23, // 49: api.public.pipelines.Pipelines.GetSatellite:input_type -> api.public.pipelines.GetSatelliteRequest
	25, // 50: api.public.pipelines.Pipelines.WakeSatellite:input_type -> api.public.pipelines.WakeSatelliteRequest
	27, // 51: api.public.pipelines.Pipelines.ReserveSatellite:input_type -> api.public.pipelines.ReserveSatelliteRequest
	29, // 52: api.public.pipelines.Pipelines.ListRemoteRepos:input_type -> api.public.pipelines.ListRemoteReposRequest
	48, // 53: api.public.pipelines.Pipelines.ListRemoteOrgs:input_type -> api.public.pipelines.ListRemoteOrgsRequest
	33, // 54: api.public.pipelines.Pipelines.AddProjectRepos:input_type -> api.public.pipelines.AddProjectReposRequest
	35, // 55: api.public.pipelines.Pipelines.RemoveProjectRepo:input_type -> api.public.pipelines.RemoveProjectRepoRequest
	37, // 56: api.public.pipelines.Pipelines.UpdateProjectRepoBranch:input_type -> api.public.pipelines.UpdateProjectRepoBranchRequest
	39, // 57: api.public.pipelines.Pipelines.ListProjectRepos:input_type -> api.public.pipelines.ListProjectReposRequest
	53, // 58: api.public.pipelines.Pipelines.ListPipelines:input_type -> api.public.pipelines.ListPipelinesRequest
	55, // 59: api.public.pipelines.Pipelines.AddPipelines:input_type -> api.public.pipelines.AddPipelinesRequest
	51, // 60: api.public.pipelines.Pipelines.GetPipeline:input_type -> api.public.pipelines.GetPipelineRequest
	46, // 61: api.public.pipelines.Pipelines.ListRemotePipelines:input_type -> api.public.pipelines.ListRemotePipelinesRequest
	57, // 62: api.public.pipelines.Pipelines.RemovePipeline:input_type -> api.public.pipelines.RemovePipelineRequest
	61, // 63: api.public.pipelines.Pipelines.ListRuns:input_type -> api.public.pipelines.ListRunsRequest
	63, // 64: api.public.pipelines.Pipelines.GetRun:input_type -> api.public.pipelines.GetRunRequest
	67, // 65: api.public.pipelines.Pipelines.Rerun:input_type -> api.public.pipelines.RerunRequest
	65, // 66: api.public.pipelines.Pipelines.CancelRun:input_type -> api.public.pipelines.CancelRunRequest
	8,  // 67: api.public.pipelines.Pipelines.GetOrgLimits:input_type -> api.public.pipelines.GetOrgLimitsRequest
	69, // 68: api.public.pipelines.Pipelines.ListSyncStatuses:input_type -> api.public.pipelines.ListSyncStatusesRequest
	72, // 69: api.public.pipelines.Pipelines.TriggerRunEvent:input_type -> api.public.pipelines.TriggerRunEventRequest
	74, // 70: api.public.pipelines.Pipelines.ListAccountEmails:input_type -> api.public.pipelines.ListAccountEmailsRequest
	11, // 71: api.public.pipelines.Pipelines.ManualBuild:output_type -> api.public.pipelines.ManualBuildResponse
	16, // 72: api.public.pipelines.Pipelines.LaunchSatellite:output_type -> api.public.pipelines.LaunchSatelliteResponse
	18, // 73: api.public.pipelines.Pipelines.ListSatellites:output_type -> api.public.pipelines.ListSatellitesResponse
	20, // 74: api.public.pipelines.Pipelines.UpdateSatellite:output_type -> api.public.pipelines.UpdateSatelliteResponse
	22, // 75: api.public.pipelines.Pipelines.DeleteSatellite:output_type -> api.public.pipelines.DeleteSatelliteResponse
	24, // 76: api.public.pipelines.Pipelines.GetSatellite:output_type -> api.public.pipelines.GetSatelliteResponse
	26, // 77: api.public.pipelines.Pipelines.WakeSatellite:output_type -> api.public.pipelines.WakeSatelliteResponse
	28, // 78: api.public.pipelines.Pipelines.ReserveSatellite:output_type -> api.public.pipelines.ReserveSatelliteResponse
	31, // 79: api.public.pipelines.Pipelines.ListRemoteRepos:output_type -> api.public.pipelines.ListRemoteReposResponse
	50, // 80: api.public.pipelines.Pipelines.ListRemoteOrgs:output_type -> api.public.pipelines.ListRemoteOrgsResponse
	34, // 81: api.public.pipelines.Pipelines.AddProjectRepos:output_type -> api.public.pipelines.AddProjectReposResponse
	36, // 82: api.public.pipelines.Pipelines.RemoveProjectRepo:output_type -> api.public.pipelines.RemoveProjectRepoResponse
	38, // 83: api.public.pipelines.Pipelines.UpdateProjectRepoBranch:output_type -> api.public.pipelines.UpdateProjectRepoBranchResponse
	40, // 84: api.public.pipelines.Pipelines.ListProjectRepos:output_type -> api.public.pipelines.ListProjectReposResponse
	54, // 85: api.public.pipelines.Pipelines.ListPipelines:output_type -> api.public.pipelines.ListPipelinesResponse
	56, // 86: api.public.pipelines.Pipelines.AddPipelines:output_type -> api.public.pipelines.AddPipelinesResponse
	52, // 87: api.public.pipelines.Pipelines.GetPipeline:output_type -> api.public.pipelines.GetPipelineResponse
	47, // 88: api.public.pipelines.Pipelines.ListRemotePipelines:output_type -> api.public.pipelines.ListRemotePipelinesResponse
	58, // 89: api.public.pipelines.Pipelines.RemovePipeline:output_type -> api.public.pipelines.RemovePipelineResponse
	62, // 90: api.public.pipelines.Pipelines.ListRuns:output_type -> api.public.pipelines.ListRunsResponse
	64, // 91: api.public.pipelines.Pipelines.GetRun:output_type -> api.public.pipelines.GetRunResponse
	68, // 92: api.public.pipelines.Pipelines.Rerun:output_type -> api.public.pipelines.RerunResponse
	66, // 93: api.public.pipelines.Pipelines.CancelRun:output_type -> api.public.pipelines.CancelRunResponse
	9,  // 94: api.public.pipelines.Pipelines.GetOrgLimits:output_type -> api.public.pipelines.GetOrgLimitsResponse
	71, // 95: api.public.pipelines.Pipelines.ListSyncStatuses:output_type -> api.public.pipelines.ListSyncStatusesResponse
	73, // 96: api.public.pipelines.Pipelines.TriggerRunEvent:output_type -> api.public.pipelines.TriggerRunEventResponse
	75, // 97: api.public.pipelines.Pipelines.ListAccountEmails:output_type -> api.public.pipelines.ListAccountEmailsResponse
	71, // [71:98] is the sub-list for method output_type
	44, // [44:71] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_pipelines_proto_init() }
func file_pipelines_proto_init() {
	if File_pipelines_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pipelines_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgLimitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualBuildRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualBuildResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchSatelliteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchSatelliteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSatellitesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSatellitesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSatelliteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSatelliteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSatelliteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSatelliteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSatelliteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSatelliteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WakeSatelliteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WakeSatelliteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveSatelliteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReserveSatelliteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRemoteReposRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRemoteReposResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProjectReposRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddProjectReposResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveProjectRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveProjectRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectRepoBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectRepoBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectReposRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProjectReposResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemotePipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EarthfileParsingError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRemotePipelinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRemotePipelinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRemoteOrgsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteOrg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRemoteOrgsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPipelinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddPipelinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRunsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRunsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RerunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RerunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSyncStatusesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSyncStatusesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerRunEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerRunEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountEmailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAccountEmailsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipelines_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSatellitesResponse_SatelliteInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pipelines_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   69,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pipelines_proto_goTypes,
		DependencyIndexes: file_pipelines_proto_depIdxs,
		EnumInfos:         file_pipelines_proto_enumTypes,
		MessageInfos:      file_pipelines_proto_msgTypes,
	}.Build()
	File_pipelines_proto = out.File
	file_pipelines_proto_rawDesc = nil
	file_pipelines_proto_goTypes = nil
	file_pipelines_proto_depIdxs = nil
}
