// Code generated by git.sr.ht/~nelsam/hel. DO NOT EDIT.
//
// This file contains mocks generated by hel. Do not edit this code by
// hand unless you *really* know what you're doing. Expect any changes
// made manually to be overwritten the next time hel regenerates this
// file.

package ast_test

import (
	"time"

	"git.sr.ht/~nelsam/hel/vegr"
)

type mockNamedReader struct {
	t          vegr.T
	timeout    time.Duration
	NameCalled chan bool
	NameOutput struct {
		Ret0 chan string
	}
	SeekCalled chan bool
	SeekInput  struct {
		Offset chan int64
		Whence chan int
	}
	SeekOutput struct {
		Ret0 chan int64
		Ret1 chan error
	}
	ReadCalled chan bool
	ReadInput  struct {
		Buff chan []byte
	}
	ReadOutput struct {
		N   chan int
		Err chan error
	}
}

func newMockNamedReader(t vegr.T, timeout time.Duration) *mockNamedReader {
	m := &mockNamedReader{t: t, timeout: timeout}
	m.NameCalled = make(chan bool, 100)
	m.NameOutput.Ret0 = make(chan string, 100)
	m.SeekCalled = make(chan bool, 100)
	m.SeekInput.Offset = make(chan int64, 100)
	m.SeekInput.Whence = make(chan int, 100)
	m.SeekOutput.Ret0 = make(chan int64, 100)
	m.SeekOutput.Ret1 = make(chan error, 100)
	m.ReadCalled = make(chan bool, 100)
	m.ReadInput.Buff = make(chan []byte, 100)
	m.ReadOutput.N = make(chan int, 100)
	m.ReadOutput.Err = make(chan error, 100)
	return m
}
func (m *mockNamedReader) Name() (ret0 string) {
	m.t.Helper()
	m.NameCalled <- true
	vegr.PopulateReturns(m.t, "Name", m.timeout, m.NameOutput, &ret0)
	return ret0
}
func (m *mockNamedReader) Seek(offset int64, whence int) (ret0 int64, ret1 error) {
	m.t.Helper()
	m.SeekCalled <- true
	m.SeekInput.Offset <- offset
	m.SeekInput.Whence <- whence
	vegr.PopulateReturns(m.t, "Seek", m.timeout, m.SeekOutput, &ret0, &ret1)
	return ret0, ret1
}
func (m *mockNamedReader) Read(buff []byte) (n int, err error) {
	m.t.Helper()
	m.ReadCalled <- true
	m.ReadInput.Buff <- buff
	vegr.PopulateReturns(m.t, "Read", m.timeout, m.ReadOutput, &n, &err)
	return n, err
}
