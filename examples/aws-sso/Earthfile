VERSION 0.8
FROM amazon/aws-cli

target:
  BUILD +run --sso_region="us-east-2" --region="us-east-2" --args="sts get-caller-identity"

login:
  ARG EARTHLY_CI
  IF [ "$EARTHLY_CI" = "false" ]
    ARG --required sso_region
    BUILD +dev.login.open --sso_region=$sso_region
    COPY +dev.login/aws /root/.aws
    RUN aws configure export-credentials --format process --profile default > /root/.aws/credentials.process
    SAVE ARTIFACT /root/.aws/credentials.process /credentials.process
  ELSE IF [ "$EARTHLY_CI" = "true" ]
    RUN mkdir -p /root/.aws/
    RUN --secret AWS_ACCESS_KEY_ID --secret AWS_SECRET_ACCESS_KEY --secret AWS_SESSION_TOKEN printf "[default]\naws_access_key_id=$AWS_ACCESS_KEY_ID\naws_secret_access_key=$AWS_SECRET_ACCESS_KEY\naws_session_token=$AWS_SESSION_TOKEN\n" >> /root/.aws/credentials
    SAVE ARTIFACT /root/.aws/credentials /credentials
  ELSE
    RUN echo "bad value for EARTHLY_CI" && exit 1
  END

dev.login.open:
  ARG --required sso_region
  LOCALLY
  RUN command -v python3 >/dev/null || (echo "python3 is needed locally" && exit 1)
  # unbuffer will preserve colored output if installed
  IF command -v unbuffer
    RUN unbuffer earthly +dev.login 2>&1 | tee /dev/tty | grep --line-buffered -Eo "[A-Z]{4}-[A-Z]{4}" | xargs -I % sh -c "python3 -m webbrowser https://device.sso.$sso_region.amazonaws.com/?user_code=%"
  ELSE
    RUN earthly +dev.login 2>&1 | tee /dev/tty | grep --line-buffered -Eo "[A-Z]{4}-[A-Z]{4}" | xargs -I % sh -c "python3 -m webbrowser https://device.sso.$sso_region.amazonaws.com/?user_code=%"
  END

# Uses `aws sso login` to login to the AWS account
dev.login:
  COPY --if-exists ./cache/ /root/.aws/
  COPY sso_config /root/.aws/config
  IF --no-cache ! aws sts get-caller-identity
    RUN --no-cache aws sso login
    SAVE ARTIFACT /root/.aws AS LOCAL ./cache
  END
  SAVE ARTIFACT /root/.aws /aws

# Run a command with the AWS CLI
run:
  ARG --required sso_region
  ARG --required region
  ARG --required args
  DO +LOGIN --sso_region=$sso_region
  ENV AWS_REGION=$region
  RUN --no-cache aws $args

LOGIN:
  FUNCTION
  ARG --required sso_region
  BUILD +login --sso_region=$sso_region
  COPY (+login/credentials.process --sso_region=$sso_region) /root/.aws/credentials.process
  RUN printf "[profile default]\ncredential_process = cat /root/.aws/credentials.process" > /root/.aws/config
