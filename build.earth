FROM golang:1.13-alpine3.11

RUN apk add --update --no-cache \
	bash \
	bash-completion \
	binutils \
	ca-certificates \
	coreutils \
	curl \
	findutils \
	g++ \
	git \
	grep \
	grep \
	less \
	less \
	make \
	openssl \
	util-linux

WORKDIR /earthly

deps:
	RUN go get golang.org/x/tools/cmd/goimports
	RUN go get golang.org/x/lint/golint
	RUN go get github.com/gordonklaus/ineffassign
	COPY go.mod go.sum ./
	RUN go mod download
	SAVE ARTIFACT go.mod AS LOCAL go.mod
	SAVE ARTIFACT go.sum AS LOCAL go.sum
	SAVE IMAGE

code:
	FROM +deps
	COPY --dir buildcontext builder cleanup cmd conslogging dockertar domain \
		llbutil logging ./
	COPY --dir buildkitd/buildkitd.go buildkitd/settings.go buildkitd/
	COPY --dir earthfile2llb/antlrhandler earthfile2llb/dedup earthfile2llb/image \
		earthfile2llb/imr earthfile2llb/variables earthfile2llb/*.go earthfile2llb/
	COPY ./earthfile2llb/parser+parser/*.go ./earthfile2llb/parser/
	SAVE IMAGE

lint:
	FROM +code
	RUN output="$(ineffassign . | grep -v '/earthly/earthfile2llb/parser/.*\.go')" ; \
		if [ -n "$output" ]; then \
			echo "$output" ; \
			exit 1 ; \
		fi
	RUN output="$(goimports -d . 2>&1)" ; \
		if [ -n "$output" ]; then \
			echo "$output" ; \
			exit 1 ; \
		fi
	RUN golint -set_exit_status .
	RUN output="$(go vet ./... 2>&1)" ; \
		if [ -n "$output" ]; then \
			echo "$output" ; \
			exit 1 ; \
		fi

earth:
	FROM +code
	ARG GOOS=linux
	ARG GOARCH=amd64
	ARG GO_EXTRA_LDFLAGS="-linkmode external -extldflags -static"
	RUN test -n "$GOOS" && test -n "$GOARCH"
	ARG EARTHLY_TARGET_TAG
	ARG VERSION=$EARTHLY_TARGET_TAG
	ARG DEFAULT_BUILDKITD_IMAGE=earthly/buildkitd:$VERSION
	ARG GOCACHE=/go-cache
	RUN --mount=type=cache,target=$GOCACHE \
		go build \
			-ldflags "-X main.DefaultBuildkitdImage=$DEFAULT_BUILDKITD_IMAGE -X main.Version=$VERSION $GO_EXTRA_LDFLAGS" \
			-o build/earth \
			cmd/earth/*.go
	SAVE ARTIFACT build/earth AS LOCAL "build/$GOOS/$GOARCH/earth"

earth-all:
	BUILD +earth
	BUILD \
		--build-arg GOOS=darwin \
		--build-arg GOARCH=amd64 \
		--build-arg GO_EXTRA_LDFLAGS= \
		+earth

earth-docker:
	FROM ./buildkitd+buildkitd
	RUN apk add --update --no-cache docker-cli
	ENV ENABLE_LOOP_DEVICE=false
	COPY earth-buildkitd-wrapper.sh /usr/bin/earth-buildkitd-wrapper.sh
	ENTRYPOINT ["/usr/bin/earth-buildkitd-wrapper.sh"]
	ARG EARTHLY_TARGET_TAG
	ARG TAG=$EARTHLY_TARGET_TAG
	COPY --build-arg VERSION=$TAG +earth/earth /usr/bin/earth
	SAVE IMAGE --push earthly/earth:$TAG

all:
	BUILD +earth-all
	BUILD +earth-docker
	BUILD ./buildkitd+buildkitd

test:
	BUILD +lint
	BUILD ./examples/tests+all
	BUILD +examples

examples:
	BUILD ./examples/go+docker
	BUILD ./examples/java+docker
	BUILD ./examples/js+docker
	BUILD ./examples/monorepo+all
	BUILD ./examples/multirepo+docker
	BUILD ./examples/readme+parallel
	BUILD ./examples/readme+final-success-target

test-experimental:
	BUILD ./examples/tests+experimental

release:
	ARG RELEASE_TAG
	RUN test -n "$RELEASE_TAG"
	BUILD +test
	BUILD --build-arg RELEASE_TAG="$RELEASE_TAG" +release-dockerhub
	BUILD --build-arg RELEASE_TAG="$RELEASE_TAG" +release-github
	# TODO: Enable this once comfortable that it works.
	#BUILD --build-arg RELEASE_TAG="$RELEASE_TAG" +release-homebrew

release-dockerhub:
	ARG RELEASE_TAG
	RUN test -n "$RELEASE_TAG"
	BUILD --build-arg TAG="$RELEASE_TAG" +earth-docker
	BUILD --build-arg TAG="$RELEASE_TAG" ./buildkitd+buildkitd
	BUILD --build-arg TAG=latest +earth-docker
	BUILD --build-arg TAG=latest ./buildkitd+buildkitd

release-github:
	FROM node:13.10.1-alpine3.11
	RUN npm install -g github-release-cli
	WORKDIR /earthly
	ARG RELEASE_TAG
	ARG EARTHLY_GIT_HASH
	RUN test -n "$RELEASE_TAG" && test -n "$EARTHLY_GIT_HASH"
	COPY --build-arg VERSION=$RELEASE_TAG \
		+earth/earth ./earth-linux-amd64
	COPY --build-arg VERSION=$RELEASE_TAG \
		--build-arg GOOS=darwin \
		--build-arg GOARCH=amd64 \
		--build-arg GO_EXTRA_LDFLAGS= \
		+earth/earth ./earth-darwin-amd64
	ARG BODY="No details provided"
	RUN --secret GITHUB_TOKEN=+secrets/GITHUB_TOKEN test -n "$GITHUB_TOKEN"
	RUN --push \
		--secret GITHUB_TOKEN=+secrets/GITHUB_TOKEN \
		github-release upload \
		--owner earthly \
		--repo earthly \
		--commitish "$EARTHLY_GIT_HASH" \
		--tag "$RELEASE_TAG" \
		--name "$RELEASE_TAG" \
		--body "$BODY" \
		earth-linux-amd64 earth-darwin-amd64

release-homebrew:
	RUN apk add --update --no-cache ruby ruby-json ruby-bigdecimal ruby-etc
	RUN cd /usr/local && \
		mkdir homebrew && \
		curl -L https://github.com/Homebrew/brew/tarball/2.2.15 | tar xz --strip 1 -C homebrew
	RUN ln -s /usr/local/homebrew/bin/brew /usr/local/bin/brew
	RUN brew --version
	ARG RELEASE_TAG
	RUN test -n "$RELEASE_TAG"
	ARG BREW_URL=https://github.com/earthly/earthly/archive/"$RELEASE_TAG".tar.gz
	RUN test -n "$BREW_URL"
	RUN echo "brew URL: $BREW_URL"
	RUN curl -L "$BREW_URL" | sha256sum | cut -f 1 -d ' ' > downloadsha256.txt
	RUN echo "sha256: $(cat downloadsha256.txt)"
	RUN --push brew bump-formula-pr \
		--no-browse --strict --verbose \
		--url "$BREW_URL" \
		--sha256 "$(cat downloadsha256.txt)"

release-vscode-syntax-highlighting:
	BUILD ./contrib/earthfile-syntax-highlighting+release
